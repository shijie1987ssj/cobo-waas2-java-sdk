/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.GetApiKeyInfo200Response;
import com.cobo.waas2.model.ListCallbackMessages200Response;
import com.cobo.waas2.model.RetryCallbackMessage201Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevelopersApi
 */
@Disabled
public class DevelopersApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final DevelopersApi api = new DevelopersApi();

    /**
     * Get API key information
     *
     * This operation retrieves the details of the API key that you are using.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeyInfoTest() throws ApiException {
        GetApiKeyInfo200Response response = api.getApiKeyInfo();
        // TODO: test validations
    }

    /**
     * List all callback messages
     *
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallbackMessagesTest() throws ApiException {
        String callbackMessageIds = null;
        String requestIds = null;
        String transactionIds = null;
        String walletIds = null;
        String status = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListCallbackMessages200Response response = api.listCallbackMessages(callbackMessageIds, requestIds, transactionIds, walletIds, status, limit, before, after);
        // TODO: test validations
    }

    /**
     * Retry callback message
     *
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn&#39;t respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be &#x60;Failed&#x60;. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryCallbackMessageTest() throws ApiException {
        String messageId = null;
        RetryCallbackMessage201Response response = api.retryCallbackMessage(messageId);
        // TODO: test validations
    }

}
