/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TransactionInitiatorType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * SwapActivity
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class SwapActivity {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activity_id";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private UUID activityId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_WALLET_ID = "wallet_id";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private UUID walletId;

  public static final String SERIALIZED_NAME_PAY_TOKEN_ID = "pay_token_id";
  @SerializedName(SERIALIZED_NAME_PAY_TOKEN_ID)
  private String payTokenId;

  public static final String SERIALIZED_NAME_RECEIVE_TOKEN_ID = "receive_token_id";
  @SerializedName(SERIALIZED_NAME_RECEIVE_TOKEN_ID)
  private String receiveTokenId;

  public static final String SERIALIZED_NAME_PAY_AMOUNT = "pay_amount";
  @SerializedName(SERIALIZED_NAME_PAY_AMOUNT)
  private String payAmount;

  public static final String SERIALIZED_NAME_RECEIVE_AMOUNT = "receive_amount";
  @SerializedName(SERIALIZED_NAME_RECEIVE_AMOUNT)
  private String receiveAmount;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "fee_amount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_INITIATOR_TYPE = "initiator_type";
  @SerializedName(SERIALIZED_NAME_INITIATOR_TYPE)
  private TransactionInitiatorType initiatorType;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Integer createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Integer updatedTimestamp;

  public SwapActivity() {
  }

  public SwapActivity activityId(UUID activityId) {
    this.activityId = activityId;
    return this;
  }

   /**
   * The unique identifier of the swap activity.
   * @return activityId
  **/
  @javax.annotation.Nullable
  public UUID getActivityId() {
    return activityId;
  }

  public void setActivityId(UUID activityId) {
    this.activityId = activityId;
  }


  public SwapActivity status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the swap activity.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SwapActivity walletId(UUID walletId) {
    this.walletId = walletId;
    return this;
  }

   /**
   * The unique identifier of the wallet.
   * @return walletId
  **/
  @javax.annotation.Nullable
  public UUID getWalletId() {
    return walletId;
  }

  public void setWalletId(UUID walletId) {
    this.walletId = walletId;
  }


  public SwapActivity payTokenId(String payTokenId) {
    this.payTokenId = payTokenId;
    return this;
  }

   /**
   * The token symbol to swap from.
   * @return payTokenId
  **/
  @javax.annotation.Nullable
  public String getPayTokenId() {
    return payTokenId;
  }

  public void setPayTokenId(String payTokenId) {
    this.payTokenId = payTokenId;
  }


  public SwapActivity receiveTokenId(String receiveTokenId) {
    this.receiveTokenId = receiveTokenId;
    return this;
  }

   /**
   * The token symbol to swap to.
   * @return receiveTokenId
  **/
  @javax.annotation.Nullable
  public String getReceiveTokenId() {
    return receiveTokenId;
  }

  public void setReceiveTokenId(String receiveTokenId) {
    this.receiveTokenId = receiveTokenId;
  }


  public SwapActivity payAmount(String payAmount) {
    this.payAmount = payAmount;
    return this;
  }

   /**
   * The amount of tokens to bridge.
   * @return payAmount
  **/
  @javax.annotation.Nullable
  public String getPayAmount() {
    return payAmount;
  }

  public void setPayAmount(String payAmount) {
    this.payAmount = payAmount;
  }


  public SwapActivity receiveAmount(String receiveAmount) {
    this.receiveAmount = receiveAmount;
    return this;
  }

   /**
   * The amount of tokens to receive.
   * @return receiveAmount
  **/
  @javax.annotation.Nullable
  public String getReceiveAmount() {
    return receiveAmount;
  }

  public void setReceiveAmount(String receiveAmount) {
    this.receiveAmount = receiveAmount;
  }


  public SwapActivity feeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * The amount of fee.
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  public String getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public SwapActivity initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

   /**
   * The initiator of the swap activity.
   * @return initiator
  **/
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public SwapActivity initiatorType(TransactionInitiatorType initiatorType) {
    this.initiatorType = initiatorType;
    return this;
  }

   /**
   * Get initiatorType
   * @return initiatorType
  **/
  @javax.annotation.Nullable
  public TransactionInitiatorType getInitiatorType() {
    return initiatorType;
  }

  public void setInitiatorType(TransactionInitiatorType initiatorType) {
    this.initiatorType = initiatorType;
  }


  public SwapActivity createdTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public SwapActivity updatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SwapActivity instance itself
   */
  public SwapActivity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwapActivity swapActivity = (SwapActivity) o;
    return Objects.equals(this.activityId, swapActivity.activityId) &&
        Objects.equals(this.status, swapActivity.status) &&
        Objects.equals(this.walletId, swapActivity.walletId) &&
        Objects.equals(this.payTokenId, swapActivity.payTokenId) &&
        Objects.equals(this.receiveTokenId, swapActivity.receiveTokenId) &&
        Objects.equals(this.payAmount, swapActivity.payAmount) &&
        Objects.equals(this.receiveAmount, swapActivity.receiveAmount) &&
        Objects.equals(this.feeAmount, swapActivity.feeAmount) &&
        Objects.equals(this.initiator, swapActivity.initiator) &&
        Objects.equals(this.initiatorType, swapActivity.initiatorType) &&
        Objects.equals(this.createdTimestamp, swapActivity.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, swapActivity.updatedTimestamp)&&
        Objects.equals(this.additionalProperties, swapActivity.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, status, walletId, payTokenId, receiveTokenId, payAmount, receiveAmount, feeAmount, initiator, initiatorType, createdTimestamp, updatedTimestamp, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwapActivity {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    payTokenId: ").append(toIndentedString(payTokenId)).append("\n");
    sb.append("    receiveTokenId: ").append(toIndentedString(receiveTokenId)).append("\n");
    sb.append("    payAmount: ").append(toIndentedString(payAmount)).append("\n");
    sb.append("    receiveAmount: ").append(toIndentedString(receiveAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    initiatorType: ").append(toIndentedString(initiatorType)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_id");
    openapiFields.add("status");
    openapiFields.add("wallet_id");
    openapiFields.add("pay_token_id");
    openapiFields.add("receive_token_id");
    openapiFields.add("pay_amount");
    openapiFields.add("receive_amount");
    openapiFields.add("fee_amount");
    openapiFields.add("initiator");
    openapiFields.add("initiator_type");
    openapiFields.add("created_timestamp");
    openapiFields.add("updated_timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SwapActivity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SwapActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SwapActivity is not found in the empty JSON string", SwapActivity.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity_id") != null && !jsonObj.get("activity_id").isJsonNull()) && !jsonObj.get("activity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("wallet_id") != null && !jsonObj.get("wallet_id").isJsonNull()) && !jsonObj.get("wallet_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallet_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wallet_id").toString()));
      }
      if ((jsonObj.get("pay_token_id") != null && !jsonObj.get("pay_token_id").isJsonNull()) && !jsonObj.get("pay_token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pay_token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pay_token_id").toString()));
      }
      if ((jsonObj.get("receive_token_id") != null && !jsonObj.get("receive_token_id").isJsonNull()) && !jsonObj.get("receive_token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receive_token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receive_token_id").toString()));
      }
      if ((jsonObj.get("pay_amount") != null && !jsonObj.get("pay_amount").isJsonNull()) && !jsonObj.get("pay_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pay_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pay_amount").toString()));
      }
      if ((jsonObj.get("receive_amount") != null && !jsonObj.get("receive_amount").isJsonNull()) && !jsonObj.get("receive_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receive_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receive_amount").toString()));
      }
      if ((jsonObj.get("fee_amount") != null && !jsonObj.get("fee_amount").isJsonNull()) && !jsonObj.get("fee_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee_amount").toString()));
      }
      if ((jsonObj.get("initiator") != null && !jsonObj.get("initiator").isJsonNull()) && !jsonObj.get("initiator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiator").toString()));
      }
      // validate the optional field `initiator_type`
      if (jsonObj.get("initiator_type") != null && !jsonObj.get("initiator_type").isJsonNull()) {
        TransactionInitiatorType.validateJsonElement(jsonObj.get("initiator_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SwapActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SwapActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SwapActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SwapActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<SwapActivity>() {
           @Override
           public void write(JsonWriter out, SwapActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SwapActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SwapActivity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SwapActivity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SwapActivity
  * @throws IOException if the JSON string is invalid with respect to SwapActivity
  */
  public static SwapActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SwapActivity.class);
  }

 /**
  * Convert an instance of SwapActivity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

