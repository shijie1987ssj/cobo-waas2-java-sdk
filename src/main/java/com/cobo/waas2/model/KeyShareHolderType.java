/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The key share holder&#39;s TSS Node type. Possible values include:  - &#x60;Cobo&#x60;: The TSS Node is generated and held by Cobo.  - &#x60;Mobile&#x60;: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).  - &#x60;API&#x60;: The TSS Node is generated and held by a [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment). 
 */
@JsonAdapter(KeyShareHolderType.Adapter.class)
public enum KeyShareHolderType {
  UNKNOWN(null),
  
  COBO("Cobo"),
  
  MOBILE("Mobile"),
  
  API("API");

  private String value;

  KeyShareHolderType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static KeyShareHolderType fromValue(String value) {
    for (KeyShareHolderType b : KeyShareHolderType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<KeyShareHolderType> {
    @Override
    public void write(final JsonWriter jsonWriter, final KeyShareHolderType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public KeyShareHolderType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return KeyShareHolderType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    KeyShareHolderType.fromValue(value);
  }
}

