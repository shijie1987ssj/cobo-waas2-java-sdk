/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.RoleScopes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * GetApiKeyInfo200Response
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class GetApiKeyInfo200Response {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include: - &#x60;ED25519&#x60;: Ed25519 - &#x60;SECP256K1&#x60;: Secp256k1 
   */
  @JsonAdapter(CurveTypeEnum.Adapter.class)
  public enum CurveTypeEnum {
    ED25519("ED25519"),
    
    SECP256K1("SECP256K1");

    private String value;

    CurveTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurveTypeEnum fromValue(String value) {
      for (CurveTypeEnum b : CurveTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurveTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurveTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurveTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurveTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurveTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURVE_TYPE = "curve_type";
  @SerializedName(SERIALIZED_NAME_CURVE_TYPE)
  private CurveTypeEnum curveType;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_VALID_IPS = "valid_ips";
  @SerializedName(SERIALIZED_NAME_VALID_IPS)
  private List<String> validIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Long updatedTimestamp;

  public static final String SERIALIZED_NAME_EXPIRED_TIMESTAMP = "expired_timestamp";
  @SerializedName(SERIALIZED_NAME_EXPIRED_TIMESTAMP)
  private Long expiredTimestamp;

  public static final String SERIALIZED_NAME_ROLE_SCOPES = "role_scopes";
  @SerializedName(SERIALIZED_NAME_ROLE_SCOPES)
  private List<RoleScopes> roleScopes = new ArrayList<>();

  public GetApiKeyInfo200Response() {
  }

  public GetApiKeyInfo200Response name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The API key name.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetApiKeyInfo200Response curveType(CurveTypeEnum curveType) {
    this.curveType = curveType;
    return this;
  }

   /**
   * The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include: - &#x60;ED25519&#x60;: Ed25519 - &#x60;SECP256K1&#x60;: Secp256k1 
   * @return curveType
  **/
  @javax.annotation.Nonnull
  public CurveTypeEnum getCurveType() {
    return curveType;
  }

  public void setCurveType(CurveTypeEnum curveType) {
    this.curveType = curveType;
  }


  public GetApiKeyInfo200Response key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The API key value.
   * @return key
  **/
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public GetApiKeyInfo200Response callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * The URL of the callback endpoint that receives callback messages triggered by this API key.
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public GetApiKeyInfo200Response validIps(List<String> validIps) {
    this.validIps = validIps;
    return this;
  }

  public GetApiKeyInfo200Response addValidIpsItem(String validIpsItem) {
    if (this.validIps == null) {
      this.validIps = new ArrayList<>();
    }
    this.validIps.add(validIpsItem);
    return this;
  }

   /**
   * (Applicable to permanent API keys only) The list of IP addresses that are allowed to use this API key.
   * @return validIps
  **/
  @javax.annotation.Nullable
  public List<String> getValidIps() {
    return validIps;
  }

  public void setValidIps(List<String> validIps) {
    this.validIps = validIps;
  }


  public GetApiKeyInfo200Response createdTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The time when the API key was registered, in Unix timestamp format, measured in milliseconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nonnull
  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public GetApiKeyInfo200Response updatedTimestamp(Long updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The time when the API key information was last updated, in Unix timestamp format, measured in milliseconds.
   * @return updatedTimestamp
  **/
  @javax.annotation.Nonnull
  public Long getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(Long updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public GetApiKeyInfo200Response expiredTimestamp(Long expiredTimestamp) {
    this.expiredTimestamp = expiredTimestamp;
    return this;
  }

   /**
   * The time when the API key expires, in Unix timestamp format, measured in milliseconds. For permanent API keys, this property value is &#x60;null&#x60;.
   * @return expiredTimestamp
  **/
  @javax.annotation.Nullable
  public Long getExpiredTimestamp() {
    return expiredTimestamp;
  }

  public void setExpiredTimestamp(Long expiredTimestamp) {
    this.expiredTimestamp = expiredTimestamp;
  }


  public GetApiKeyInfo200Response roleScopes(List<RoleScopes> roleScopes) {
    this.roleScopes = roleScopes;
    return this;
  }

  public GetApiKeyInfo200Response addRoleScopesItem(RoleScopes roleScopesItem) {
    if (this.roleScopes == null) {
      this.roleScopes = new ArrayList<>();
    }
    this.roleScopes.add(roleScopesItem);
    return this;
  }

   /**
   * The list of user roles and wallet scopes associated with the API key.
   * @return roleScopes
  **/
  @javax.annotation.Nullable
  public List<RoleScopes> getRoleScopes() {
    return roleScopes;
  }

  public void setRoleScopes(List<RoleScopes> roleScopes) {
    this.roleScopes = roleScopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetApiKeyInfo200Response instance itself
   */
  public GetApiKeyInfo200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetApiKeyInfo200Response getApiKeyInfo200Response = (GetApiKeyInfo200Response) o;
    return Objects.equals(this.name, getApiKeyInfo200Response.name) &&
        Objects.equals(this.curveType, getApiKeyInfo200Response.curveType) &&
        Objects.equals(this.key, getApiKeyInfo200Response.key) &&
        Objects.equals(this.callbackUrl, getApiKeyInfo200Response.callbackUrl) &&
        Objects.equals(this.validIps, getApiKeyInfo200Response.validIps) &&
        Objects.equals(this.createdTimestamp, getApiKeyInfo200Response.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, getApiKeyInfo200Response.updatedTimestamp) &&
        Objects.equals(this.expiredTimestamp, getApiKeyInfo200Response.expiredTimestamp) &&
        Objects.equals(this.roleScopes, getApiKeyInfo200Response.roleScopes)&&
        Objects.equals(this.additionalProperties, getApiKeyInfo200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, curveType, key, callbackUrl, validIps, createdTimestamp, updatedTimestamp, expiredTimestamp, roleScopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetApiKeyInfo200Response {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    curveType: ").append(toIndentedString(curveType)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    validIps: ").append(toIndentedString(validIps)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    expiredTimestamp: ").append(toIndentedString(expiredTimestamp)).append("\n");
    sb.append("    roleScopes: ").append(toIndentedString(roleScopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("curve_type");
    openapiFields.add("key");
    openapiFields.add("callback_url");
    openapiFields.add("valid_ips");
    openapiFields.add("created_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("expired_timestamp");
    openapiFields.add("role_scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("curve_type");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("created_timestamp");
    openapiRequiredFields.add("updated_timestamp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetApiKeyInfo200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetApiKeyInfo200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetApiKeyInfo200Response is not found in the empty JSON string", GetApiKeyInfo200Response.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetApiKeyInfo200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("curve_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curve_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curve_type").toString()));
      }
      // validate the required field `curve_type`
      CurveTypeEnum.validateJsonElement(jsonObj.get("curve_type"));
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valid_ips") != null && !jsonObj.get("valid_ips").isJsonNull() && !jsonObj.get("valid_ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_ips` to be an array in the JSON string but got `%s`", jsonObj.get("valid_ips").toString()));
      }
      if (jsonObj.get("role_scopes") != null && !jsonObj.get("role_scopes").isJsonNull()) {
        JsonArray jsonArrayroleScopes = jsonObj.getAsJsonArray("role_scopes");
        if (jsonArrayroleScopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("role_scopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `role_scopes` to be an array in the JSON string but got `%s`", jsonObj.get("role_scopes").toString()));
          }

          // validate the optional field `role_scopes` (array)
          for (int i = 0; i < jsonArrayroleScopes.size(); i++) {
            RoleScopes.validateJsonElement(jsonArrayroleScopes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetApiKeyInfo200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetApiKeyInfo200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetApiKeyInfo200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetApiKeyInfo200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetApiKeyInfo200Response>() {
           @Override
           public void write(JsonWriter out, GetApiKeyInfo200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetApiKeyInfo200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetApiKeyInfo200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetApiKeyInfo200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetApiKeyInfo200Response
  * @throws IOException if the JSON string is invalid with respect to GetApiKeyInfo200Response
  */
  public static GetApiKeyInfo200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetApiKeyInfo200Response.class);
  }

 /**
  * Convert an instance of GetApiKeyInfo200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

