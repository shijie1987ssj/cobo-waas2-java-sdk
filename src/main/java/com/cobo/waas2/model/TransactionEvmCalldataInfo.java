/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TransactionEvmContractMethod;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TransactionEvmCalldataInfo
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TransactionEvmCalldataInfo {
  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IMPL_ADDRESS = "impl_address";
  @SerializedName(SERIALIZED_NAME_IMPL_ADDRESS)
  private String implAddress;

  public static final String SERIALIZED_NAME_IMPL_NAME = "impl_name";
  @SerializedName(SERIALIZED_NAME_IMPL_NAME)
  private String implName;

  public static final String SERIALIZED_NAME_PROXY = "proxy";
  @SerializedName(SERIALIZED_NAME_PROXY)
  private Boolean proxy;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private TransactionEvmContractMethod method;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params;

  public TransactionEvmCalldataInfo() {
  }

  public TransactionEvmCalldataInfo chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * The ID of the chain on which the smart contract is deployed.
   * @return chainId
  **/
  @javax.annotation.Nullable
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public TransactionEvmCalldataInfo address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address of the smart contract.
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TransactionEvmCalldataInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the smart contract.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TransactionEvmCalldataInfo implAddress(String implAddress) {
    this.implAddress = implAddress;
    return this;
  }

   /**
   * The address of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
   * @return implAddress
  **/
  @javax.annotation.Nullable
  public String getImplAddress() {
    return implAddress;
  }

  public void setImplAddress(String implAddress) {
    this.implAddress = implAddress;
  }


  public TransactionEvmCalldataInfo implName(String implName) {
    this.implName = implName;
    return this;
  }

   /**
   * The name of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
   * @return implName
  **/
  @javax.annotation.Nullable
  public String getImplName() {
    return implName;
  }

  public void setImplName(String implName) {
    this.implName = implName;
  }


  public TransactionEvmCalldataInfo proxy(Boolean proxy) {
    this.proxy = proxy;
    return this;
  }

   /**
   * Whether the specified smart contract address is a proxy contract. - &#x60;true&#x60;: The specified smart contract address is a proxy contract. - &#x60;false&#x60;: The specified smart contract address is not a proxy contract. 
   * @return proxy
  **/
  @javax.annotation.Nullable
  public Boolean getProxy() {
    return proxy;
  }

  public void setProxy(Boolean proxy) {
    this.proxy = proxy;
  }


  public TransactionEvmCalldataInfo method(TransactionEvmContractMethod method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  public TransactionEvmContractMethod getMethod() {
    return method;
  }

  public void setMethod(TransactionEvmContractMethod method) {
    this.method = method;
  }


  public TransactionEvmCalldataInfo params(String params) {
    this.params = params;
    return this;
  }

   /**
   * The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter: - Parameter name: The unique identifier of the parameter, such as &#x60;kind&#x60;, &#x60;swaps&#x60;, and &#x60;to&#x60;. - Parameter type: The Solidity data type of the parameter, such as &#x60;uint8&#x60;, &#x60;tuple[]&#x60;, &#x60;address[]&#x60;, and &#x60;int256[]&#x60;. - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as &#x60;uint256&#x60; or &#x60;address&#x60;, this value is a single element. If the parameter type is a complex type such as &#x60;tuple[]&#x60; or &#x60;address[]&#x60;, the value is a nested array, with each inner array containing parameter names, types, and values. 
   * @return params
  **/
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionEvmCalldataInfo instance itself
   */
  public TransactionEvmCalldataInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionEvmCalldataInfo transactionEvmCalldataInfo = (TransactionEvmCalldataInfo) o;
    return Objects.equals(this.chainId, transactionEvmCalldataInfo.chainId) &&
        Objects.equals(this.address, transactionEvmCalldataInfo.address) &&
        Objects.equals(this.name, transactionEvmCalldataInfo.name) &&
        Objects.equals(this.implAddress, transactionEvmCalldataInfo.implAddress) &&
        Objects.equals(this.implName, transactionEvmCalldataInfo.implName) &&
        Objects.equals(this.proxy, transactionEvmCalldataInfo.proxy) &&
        Objects.equals(this.method, transactionEvmCalldataInfo.method) &&
        Objects.equals(this.params, transactionEvmCalldataInfo.params)&&
        Objects.equals(this.additionalProperties, transactionEvmCalldataInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chainId, address, name, implAddress, implName, proxy, method, params, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionEvmCalldataInfo {\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    implAddress: ").append(toIndentedString(implAddress)).append("\n");
    sb.append("    implName: ").append(toIndentedString(implName)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chain_id");
    openapiFields.add("address");
    openapiFields.add("name");
    openapiFields.add("impl_address");
    openapiFields.add("impl_name");
    openapiFields.add("proxy");
    openapiFields.add("method");
    openapiFields.add("params");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionEvmCalldataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionEvmCalldataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionEvmCalldataInfo is not found in the empty JSON string", TransactionEvmCalldataInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chain_id") != null && !jsonObj.get("chain_id").isJsonNull()) && !jsonObj.get("chain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain_id").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("impl_address") != null && !jsonObj.get("impl_address").isJsonNull()) && !jsonObj.get("impl_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impl_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impl_address").toString()));
      }
      if ((jsonObj.get("impl_name") != null && !jsonObj.get("impl_name").isJsonNull()) && !jsonObj.get("impl_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impl_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impl_name").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        TransactionEvmContractMethod.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionEvmCalldataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionEvmCalldataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionEvmCalldataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionEvmCalldataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionEvmCalldataInfo>() {
           @Override
           public void write(JsonWriter out, TransactionEvmCalldataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionEvmCalldataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TransactionEvmCalldataInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionEvmCalldataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionEvmCalldataInfo
  * @throws IOException if the JSON string is invalid with respect to TransactionEvmCalldataInfo
  */
  public static TransactionEvmCalldataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionEvmCalldataInfo.class);
  }

 /**
  * Convert an instance of TransactionEvmCalldataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

