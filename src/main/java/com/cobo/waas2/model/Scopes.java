/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.WalletSubtype;
import com.cobo.waas2.model.WalletType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The wallet scopes associated with this API key.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class Scopes {
  public static final String SERIALIZED_NAME_WALLET_TYPES = "wallet_types";
  @SerializedName(SERIALIZED_NAME_WALLET_TYPES)
  private List<WalletType> walletTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WALLET_SUBTYPES = "wallet_subtypes";
  @SerializedName(SERIALIZED_NAME_WALLET_SUBTYPES)
  private List<WalletSubtype> walletSubtypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WALLET_IDS = "wallet_ids";
  @SerializedName(SERIALIZED_NAME_WALLET_IDS)
  private List<String> walletIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VAULT_IDS = "vault_ids";
  @SerializedName(SERIALIZED_NAME_VAULT_IDS)
  private List<String> vaultIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_IDS = "project_ids";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  private List<String> projectIds = new ArrayList<>();

  public Scopes() {
  }

  public Scopes walletTypes(List<WalletType> walletTypes) {
    this.walletTypes = walletTypes;
    return this;
  }

  public Scopes addWalletTypesItem(WalletType walletTypesItem) {
    if (this.walletTypes == null) {
      this.walletTypes = new ArrayList<>();
    }
    this.walletTypes.add(walletTypesItem);
    return this;
  }

   /**
   * The list of wallet types that this API key can access. Possible values include:   - &#x60;Custodial&#x60;: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)   - &#x60;MPC&#x60;: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)   - &#x60;SmartContract&#x60;: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)   - &#x60;Exchange&#x60;: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
   * @return walletTypes
  **/
  @javax.annotation.Nullable
  public List<WalletType> getWalletTypes() {
    return walletTypes;
  }

  public void setWalletTypes(List<WalletType> walletTypes) {
    this.walletTypes = walletTypes;
  }


  public Scopes walletSubtypes(List<WalletSubtype> walletSubtypes) {
    this.walletSubtypes = walletSubtypes;
    return this;
  }

  public Scopes addWalletSubtypesItem(WalletSubtype walletSubtypesItem) {
    if (this.walletSubtypes == null) {
      this.walletSubtypes = new ArrayList<>();
    }
    this.walletSubtypes.add(walletSubtypesItem);
    return this;
  }

   /**
   * The list of wallet sub-types that this API key can access. Possible values include:   - &#x60;Asset&#x60;: Custodial Wallets (Asset Wallets).   - &#x60;Org-Controlled&#x60;: MPC Wallets (Organization-Controlled Wallets).   - &#x60;User-Controlled&#x60;: MPC Wallets (User-Controlled Wallets).   - &#x60;Safe{Wallet}&#x60;: Smart Contract Wallets (Safe).   - &#x60;Main&#x60;: Exchange Wallets (Main Account).   - &#x60;Sub&#x60;: Exchange Wallets (Sub Account). 
   * @return walletSubtypes
  **/
  @javax.annotation.Nullable
  public List<WalletSubtype> getWalletSubtypes() {
    return walletSubtypes;
  }

  public void setWalletSubtypes(List<WalletSubtype> walletSubtypes) {
    this.walletSubtypes = walletSubtypes;
  }


  public Scopes walletIds(List<String> walletIds) {
    this.walletIds = walletIds;
    return this;
  }

  public Scopes addWalletIdsItem(String walletIdsItem) {
    if (this.walletIds == null) {
      this.walletIds = new ArrayList<>();
    }
    this.walletIds.add(walletIdsItem);
    return this;
  }

   /**
   * The list of wallet IDs that this API key can access.
   * @return walletIds
  **/
  @javax.annotation.Nullable
  public List<String> getWalletIds() {
    return walletIds;
  }

  public void setWalletIds(List<String> walletIds) {
    this.walletIds = walletIds;
  }


  public Scopes vaultIds(List<String> vaultIds) {
    this.vaultIds = vaultIds;
    return this;
  }

  public Scopes addVaultIdsItem(String vaultIdsItem) {
    if (this.vaultIds == null) {
      this.vaultIds = new ArrayList<>();
    }
    this.vaultIds.add(vaultIdsItem);
    return this;
  }

   /**
   * (Applicable to MPC Wallets only) The list of vault IDs that this API key can access.
   * @return vaultIds
  **/
  @javax.annotation.Nullable
  public List<String> getVaultIds() {
    return vaultIds;
  }

  public void setVaultIds(List<String> vaultIds) {
    this.vaultIds = vaultIds;
  }


  public Scopes projectIds(List<String> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public Scopes addProjectIdsItem(String projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

   /**
   * (Applicable to MPC Wallets only) The list of project IDs that this API key can access.
   * @return projectIds
  **/
  @javax.annotation.Nullable
  public List<String> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(List<String> projectIds) {
    this.projectIds = projectIds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Scopes instance itself
   */
  public Scopes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scopes scopes = (Scopes) o;
    return Objects.equals(this.walletTypes, scopes.walletTypes) &&
        Objects.equals(this.walletSubtypes, scopes.walletSubtypes) &&
        Objects.equals(this.walletIds, scopes.walletIds) &&
        Objects.equals(this.vaultIds, scopes.vaultIds) &&
        Objects.equals(this.projectIds, scopes.projectIds)&&
        Objects.equals(this.additionalProperties, scopes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(walletTypes, walletSubtypes, walletIds, vaultIds, projectIds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scopes {\n");
    sb.append("    walletTypes: ").append(toIndentedString(walletTypes)).append("\n");
    sb.append("    walletSubtypes: ").append(toIndentedString(walletSubtypes)).append("\n");
    sb.append("    walletIds: ").append(toIndentedString(walletIds)).append("\n");
    sb.append("    vaultIds: ").append(toIndentedString(vaultIds)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("wallet_types");
    openapiFields.add("wallet_subtypes");
    openapiFields.add("wallet_ids");
    openapiFields.add("vault_ids");
    openapiFields.add("project_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Scopes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Scopes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scopes is not found in the empty JSON string", Scopes.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("wallet_types") != null && !jsonObj.get("wallet_types").isJsonNull() && !jsonObj.get("wallet_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallet_types` to be an array in the JSON string but got `%s`", jsonObj.get("wallet_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wallet_subtypes") != null && !jsonObj.get("wallet_subtypes").isJsonNull() && !jsonObj.get("wallet_subtypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallet_subtypes` to be an array in the JSON string but got `%s`", jsonObj.get("wallet_subtypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wallet_ids") != null && !jsonObj.get("wallet_ids").isJsonNull() && !jsonObj.get("wallet_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallet_ids` to be an array in the JSON string but got `%s`", jsonObj.get("wallet_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vault_ids") != null && !jsonObj.get("vault_ids").isJsonNull() && !jsonObj.get("vault_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault_ids` to be an array in the JSON string but got `%s`", jsonObj.get("vault_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("project_ids") != null && !jsonObj.get("project_ids").isJsonNull() && !jsonObj.get("project_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_ids` to be an array in the JSON string but got `%s`", jsonObj.get("project_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scopes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scopes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scopes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scopes.class));

       return (TypeAdapter<T>) new TypeAdapter<Scopes>() {
           @Override
           public void write(JsonWriter out, Scopes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Scopes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Scopes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Scopes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Scopes
  * @throws IOException if the JSON string is invalid with respect to Scopes
  */
  public static Scopes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scopes.class);
  }

 /**
  * Convert an instance of Scopes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

