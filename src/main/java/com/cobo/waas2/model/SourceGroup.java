/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The source key share holder group.  **Note:** &#x60;source_key_share_holder_group&#x60; is used only when &#x60;type&#x60; is set to either &#x60;KeyGenfromKeyGroup&#x60; or &#x60;Recovery&#x60;. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the &#x60;target_key_share_holder_group&#x60;. 
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class SourceGroup {
  public static final String SERIALIZED_NAME_KEY_SHARE_HOLDER_GROUP_ID = "key_share_holder_group_id";
  @SerializedName(SERIALIZED_NAME_KEY_SHARE_HOLDER_GROUP_ID)
  private String keyShareHolderGroupId;

  public static final String SERIALIZED_NAME_TSS_NODE_IDS = "tss_node_ids";
  @SerializedName(SERIALIZED_NAME_TSS_NODE_IDS)
  private List<String> tssNodeIds = new ArrayList<>();

  public SourceGroup() {
  }

  public SourceGroup keyShareHolderGroupId(String keyShareHolderGroupId) {
    this.keyShareHolderGroupId = keyShareHolderGroupId;
    return this;
  }

   /**
   * The source key share holder group ID.
   * @return keyShareHolderGroupId
  **/
  @javax.annotation.Nonnull
  public String getKeyShareHolderGroupId() {
    return keyShareHolderGroupId;
  }

  public void setKeyShareHolderGroupId(String keyShareHolderGroupId) {
    this.keyShareHolderGroupId = keyShareHolderGroupId;
  }


  public SourceGroup tssNodeIds(List<String> tssNodeIds) {
    this.tssNodeIds = tssNodeIds;
    return this;
  }

  public SourceGroup addTssNodeIdsItem(String tssNodeIdsItem) {
    if (this.tssNodeIds == null) {
      this.tssNodeIds = new ArrayList<>();
    }
    this.tssNodeIds.add(tssNodeIdsItem);
    return this;
  }

   /**
   * The TSS Node IDs participating in creating a new key share holder group when &#x60;type&#x60; is set to either &#x60;KeyGenFromKeyGroup&#x60; or &#x60;Recovery&#x60;.   **Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) such as the 2-2, 2-3, and 3-3 schemes (in the \&quot;threshold - participants\&quot; format), for &#x60;tss_node_ids&#x60;, you only need to fill in 1 Cobo TSS Node ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers specified in &#x60;threshold&#x60;. To obtain the Cobo TSS Node ID, run [List all Cobo key share holders](/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders). 
   * @return tssNodeIds
  **/
  @javax.annotation.Nullable
  public List<String> getTssNodeIds() {
    return tssNodeIds;
  }

  public void setTssNodeIds(List<String> tssNodeIds) {
    this.tssNodeIds = tssNodeIds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourceGroup instance itself
   */
  public SourceGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceGroup sourceGroup = (SourceGroup) o;
    return Objects.equals(this.keyShareHolderGroupId, sourceGroup.keyShareHolderGroupId) &&
        Objects.equals(this.tssNodeIds, sourceGroup.tssNodeIds)&&
        Objects.equals(this.additionalProperties, sourceGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyShareHolderGroupId, tssNodeIds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceGroup {\n");
    sb.append("    keyShareHolderGroupId: ").append(toIndentedString(keyShareHolderGroupId)).append("\n");
    sb.append("    tssNodeIds: ").append(toIndentedString(tssNodeIds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key_share_holder_group_id");
    openapiFields.add("tss_node_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key_share_holder_group_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SourceGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceGroup is not found in the empty JSON string", SourceGroup.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("key_share_holder_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_share_holder_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_share_holder_group_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tss_node_ids") != null && !jsonObj.get("tss_node_ids").isJsonNull() && !jsonObj.get("tss_node_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tss_node_ids` to be an array in the JSON string but got `%s`", jsonObj.get("tss_node_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceGroup>() {
           @Override
           public void write(JsonWriter out, SourceGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SourceGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourceGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourceGroup
  * @throws IOException if the JSON string is invalid with respect to SourceGroup
  */
  public static SourceGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceGroup.class);
  }

 /**
  * Convert an instance of SourceGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

