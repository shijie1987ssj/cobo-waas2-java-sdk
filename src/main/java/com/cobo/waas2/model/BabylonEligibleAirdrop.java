/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.BabylonAirdropPop;
import com.cobo.waas2.model.BabylonRegistrationStatus;
import com.cobo.waas2.model.StakingSource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The babylon airdrop eligibility.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class BabylonEligibleAirdrop {
  public static final String SERIALIZED_NAME_BTC_ADDRESS = "btc_address";
  @SerializedName(SERIALIZED_NAME_BTC_ADDRESS)
  private StakingSource btcAddress;

  public static final String SERIALIZED_NAME_BABYLON_ADDRESS = "babylon_address";
  @SerializedName(SERIALIZED_NAME_BABYLON_ADDRESS)
  private StakingSource babylonAddress;

  public static final String SERIALIZED_NAME_BABYLON_POINTS = "babylon_points";
  @SerializedName(SERIALIZED_NAME_BABYLON_POINTS)
  private String babylonPoints;

  public static final String SERIALIZED_NAME_AIRDROP_AMOUNT = "airdrop_amount";
  @SerializedName(SERIALIZED_NAME_AIRDROP_AMOUNT)
  private String airdropAmount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BabylonRegistrationStatus status;

  public static final String SERIALIZED_NAME_POP = "pop";
  @SerializedName(SERIALIZED_NAME_POP)
  private BabylonAirdropPop pop;

  public BabylonEligibleAirdrop() {
  }

  public BabylonEligibleAirdrop btcAddress(StakingSource btcAddress) {
    this.btcAddress = btcAddress;
    return this;
  }

   /**
   * Get btcAddress
   * @return btcAddress
  **/
  @javax.annotation.Nullable
  public StakingSource getBtcAddress() {
    return btcAddress;
  }

  public void setBtcAddress(StakingSource btcAddress) {
    this.btcAddress = btcAddress;
  }


  public BabylonEligibleAirdrop babylonAddress(StakingSource babylonAddress) {
    this.babylonAddress = babylonAddress;
    return this;
  }

   /**
   * Get babylonAddress
   * @return babylonAddress
  **/
  @javax.annotation.Nullable
  public StakingSource getBabylonAddress() {
    return babylonAddress;
  }

  public void setBabylonAddress(StakingSource babylonAddress) {
    this.babylonAddress = babylonAddress;
  }


  public BabylonEligibleAirdrop babylonPoints(String babylonPoints) {
    this.babylonPoints = babylonPoints;
    return this;
  }

   /**
   * The current Babylon points balance accumulated by the BTC address.
   * @return babylonPoints
  **/
  @javax.annotation.Nullable
  public String getBabylonPoints() {
    return babylonPoints;
  }

  public void setBabylonPoints(String babylonPoints) {
    this.babylonPoints = babylonPoints;
  }


  public BabylonEligibleAirdrop airdropAmount(String airdropAmount) {
    this.airdropAmount = airdropAmount;
    return this;
  }

   /**
   * The estimated airdrop amount based on the current Babylon points balance.
   * @return airdropAmount
  **/
  @javax.annotation.Nullable
  public String getAirdropAmount() {
    return airdropAmount;
  }

  public void setAirdropAmount(String airdropAmount) {
    this.airdropAmount = airdropAmount;
  }


  public BabylonEligibleAirdrop status(BabylonRegistrationStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public BabylonRegistrationStatus getStatus() {
    return status;
  }

  public void setStatus(BabylonRegistrationStatus status) {
    this.status = status;
  }


  public BabylonEligibleAirdrop pop(BabylonAirdropPop pop) {
    this.pop = pop;
    return this;
  }

   /**
   * Get pop
   * @return pop
  **/
  @javax.annotation.Nullable
  public BabylonAirdropPop getPop() {
    return pop;
  }

  public void setPop(BabylonAirdropPop pop) {
    this.pop = pop;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BabylonEligibleAirdrop instance itself
   */
  public BabylonEligibleAirdrop putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BabylonEligibleAirdrop babylonEligibleAirdrop = (BabylonEligibleAirdrop) o;
    return Objects.equals(this.btcAddress, babylonEligibleAirdrop.btcAddress) &&
        Objects.equals(this.babylonAddress, babylonEligibleAirdrop.babylonAddress) &&
        Objects.equals(this.babylonPoints, babylonEligibleAirdrop.babylonPoints) &&
        Objects.equals(this.airdropAmount, babylonEligibleAirdrop.airdropAmount) &&
        Objects.equals(this.status, babylonEligibleAirdrop.status) &&
        Objects.equals(this.pop, babylonEligibleAirdrop.pop)&&
        Objects.equals(this.additionalProperties, babylonEligibleAirdrop.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(btcAddress, babylonAddress, babylonPoints, airdropAmount, status, pop, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BabylonEligibleAirdrop {\n");
    sb.append("    btcAddress: ").append(toIndentedString(btcAddress)).append("\n");
    sb.append("    babylonAddress: ").append(toIndentedString(babylonAddress)).append("\n");
    sb.append("    babylonPoints: ").append(toIndentedString(babylonPoints)).append("\n");
    sb.append("    airdropAmount: ").append(toIndentedString(airdropAmount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    pop: ").append(toIndentedString(pop)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("btc_address");
    openapiFields.add("babylon_address");
    openapiFields.add("babylon_points");
    openapiFields.add("airdrop_amount");
    openapiFields.add("status");
    openapiFields.add("pop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BabylonEligibleAirdrop
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BabylonEligibleAirdrop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BabylonEligibleAirdrop is not found in the empty JSON string", BabylonEligibleAirdrop.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `btc_address`
      if (jsonObj.get("btc_address") != null && !jsonObj.get("btc_address").isJsonNull()) {
        StakingSource.validateJsonElement(jsonObj.get("btc_address"));
      }
      // validate the optional field `babylon_address`
      if (jsonObj.get("babylon_address") != null && !jsonObj.get("babylon_address").isJsonNull()) {
        StakingSource.validateJsonElement(jsonObj.get("babylon_address"));
      }
      if ((jsonObj.get("babylon_points") != null && !jsonObj.get("babylon_points").isJsonNull()) && !jsonObj.get("babylon_points").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `babylon_points` to be a primitive type in the JSON string but got `%s`", jsonObj.get("babylon_points").toString()));
      }
      if ((jsonObj.get("airdrop_amount") != null && !jsonObj.get("airdrop_amount").isJsonNull()) && !jsonObj.get("airdrop_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airdrop_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airdrop_amount").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        BabylonRegistrationStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `pop`
      if (jsonObj.get("pop") != null && !jsonObj.get("pop").isJsonNull()) {
        BabylonAirdropPop.validateJsonElement(jsonObj.get("pop"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BabylonEligibleAirdrop.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BabylonEligibleAirdrop' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BabylonEligibleAirdrop> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BabylonEligibleAirdrop.class));

       return (TypeAdapter<T>) new TypeAdapter<BabylonEligibleAirdrop>() {
           @Override
           public void write(JsonWriter out, BabylonEligibleAirdrop value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BabylonEligibleAirdrop read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BabylonEligibleAirdrop instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BabylonEligibleAirdrop given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BabylonEligibleAirdrop
  * @throws IOException if the JSON string is invalid with respect to BabylonEligibleAirdrop
  */
  public static BabylonEligibleAirdrop fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BabylonEligibleAirdrop.class);
  }

 /**
  * Convert an instance of BabylonEligibleAirdrop to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

