/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2;

import com.fasterxml.jackson.databind.util.StdDateFormat;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;
import java.util.TimeZone;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    private static final StdDateFormat sdf = new StdDateFormat()
        .withTimeZone(TimeZone.getTimeZone(ZoneId.systemDefault()))
        .withColonInTimeZone(true);
    private static final DateTimeFormatter dtf = DateTimeFormatter.ISO_OFFSET_DATE_TIME;

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(com.cobo.waas2.model.ActivityExtra.class, new TypeSelector<com.cobo.waas2.model.ActivityExtra>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.ActivityExtra> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Babylon", com.cobo.waas2.model.BabylonStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("CoreBTC", com.cobo.waas2.model.CoreStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("ETHBeacon", com.cobo.waas2.model.EthStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("BabylonStakingActivityDetailExtra", com.cobo.waas2.model.BabylonStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("CoreStakingActivityDetailExtra", com.cobo.waas2.model.CoreStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("EthStakingActivityDetailExtra", com.cobo.waas2.model.EthStakingActivityDetailExtra.class);
                        classByDiscriminatorValue.put("Activity_extra", com.cobo.waas2.model.ActivityExtra.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CoboSafeDelegate.class, new TypeSelector<com.cobo.waas2.model.CoboSafeDelegate>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CoboSafeDelegate> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MPCDelegate.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.MPCDelegate.class);
                        classByDiscriminatorValue.put("MPCDelegate", com.cobo.waas2.model.MPCDelegate.class);
                        classByDiscriminatorValue.put("CoboSafeDelegate", com.cobo.waas2.model.CoboSafeDelegate.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "delegate_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.ContractCallDestination.class, new TypeSelector<com.cobo.waas2.model.ContractCallDestination>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.ContractCallDestination> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EVM_Contract", com.cobo.waas2.model.EvmContractCallDestination.class);
                        classByDiscriminatorValue.put("SOL_Contract", com.cobo.waas2.model.SolContractCallDestination.class);
                        classByDiscriminatorValue.put("EvmContractCallDestination", com.cobo.waas2.model.EvmContractCallDestination.class);
                        classByDiscriminatorValue.put("SolContractCallDestination", com.cobo.waas2.model.SolContractCallDestination.class);
                        classByDiscriminatorValue.put("ContractCallDestination", com.cobo.waas2.model.ContractCallDestination.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.ContractCallSource.class, new TypeSelector<com.cobo.waas2.model.ContractCallSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.ContractCallSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MpcContractCallSource.class);
                        classByDiscriminatorValue.put("Safe{Wallet}", com.cobo.waas2.model.SafeContractCallSource.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.MpcContractCallSource.class);
                        classByDiscriminatorValue.put("MpcContractCallSource", com.cobo.waas2.model.MpcContractCallSource.class);
                        classByDiscriminatorValue.put("SafeContractCallSource", com.cobo.waas2.model.SafeContractCallSource.class);
                        classByDiscriminatorValue.put("ContractCallSource", com.cobo.waas2.model.ContractCallSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CreateSmartContractWalletParams.class, new TypeSelector<com.cobo.waas2.model.CreateSmartContractWalletParams>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CreateSmartContractWalletParams> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Safe{Wallet}", com.cobo.waas2.model.CreateSafeWalletParams.class);
                        classByDiscriminatorValue.put("CreateSafeWalletParams", com.cobo.waas2.model.CreateSafeWalletParams.class);
                        classByDiscriminatorValue.put("CreateSmartContractWalletParams", com.cobo.waas2.model.CreateSmartContractWalletParams.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "smart_contract_wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CreateStakeActivityExtra.class, new TypeSelector<com.cobo.waas2.model.CreateStakeActivityExtra>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CreateStakeActivityExtra> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Babylon", com.cobo.waas2.model.BabylonStakeExtra.class);
                        classByDiscriminatorValue.put("CoreBTC", com.cobo.waas2.model.CoreStakeExtra.class);
                        classByDiscriminatorValue.put("ETHBeacon", com.cobo.waas2.model.EthStakeExtra.class);
                        classByDiscriminatorValue.put("BabylonStakeExtra", com.cobo.waas2.model.BabylonStakeExtra.class);
                        classByDiscriminatorValue.put("CoreStakeExtra", com.cobo.waas2.model.CoreStakeExtra.class);
                        classByDiscriminatorValue.put("EthStakeExtra", com.cobo.waas2.model.EthStakeExtra.class);
                        classByDiscriminatorValue.put("CreateStakeActivity_extra", com.cobo.waas2.model.CreateStakeActivityExtra.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CreateUnstakeActivityExtra.class, new TypeSelector<com.cobo.waas2.model.CreateUnstakeActivityExtra>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CreateUnstakeActivityExtra> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ETHBeacon", com.cobo.waas2.model.EthUnstakeExtra.class);
                        classByDiscriminatorValue.put("EthUnstakeExtra", com.cobo.waas2.model.EthUnstakeExtra.class);
                        classByDiscriminatorValue.put("CreateUnstakeActivity_extra", com.cobo.waas2.model.CreateUnstakeActivityExtra.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CreateWalletParams.class, new TypeSelector<com.cobo.waas2.model.CreateWalletParams>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CreateWalletParams> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Custodial", com.cobo.waas2.model.CreateCustodialWalletParams.class);
                        classByDiscriminatorValue.put("Exchange", com.cobo.waas2.model.CreateExchangeWalletParams.class);
                        classByDiscriminatorValue.put("MPC", com.cobo.waas2.model.CreateMpcWalletParams.class);
                        classByDiscriminatorValue.put("CreateCustodialWalletParams", com.cobo.waas2.model.CreateCustodialWalletParams.class);
                        classByDiscriminatorValue.put("CreateExchangeWalletParams", com.cobo.waas2.model.CreateExchangeWalletParams.class);
                        classByDiscriminatorValue.put("CreateMpcWalletParams", com.cobo.waas2.model.CreateMpcWalletParams.class);
                        classByDiscriminatorValue.put("CreateWalletParams", com.cobo.waas2.model.CreateWalletParams.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.CreatedWalletInfo.class, new TypeSelector<com.cobo.waas2.model.CreatedWalletInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.CreatedWalletInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Custodial", com.cobo.waas2.model.CustodialWalletInfo.class);
                        classByDiscriminatorValue.put("Exchange", com.cobo.waas2.model.ExchangeWalletInfo.class);
                        classByDiscriminatorValue.put("MPC", com.cobo.waas2.model.MPCWalletInfo.class);
                        classByDiscriminatorValue.put("CustodialWalletInfo", com.cobo.waas2.model.CustodialWalletInfo.class);
                        classByDiscriminatorValue.put("ExchangeWalletInfo", com.cobo.waas2.model.ExchangeWalletInfo.class);
                        classByDiscriminatorValue.put("MPCWalletInfo", com.cobo.waas2.model.MPCWalletInfo.class);
                        classByDiscriminatorValue.put("CreatedWalletInfo", com.cobo.waas2.model.CreatedWalletInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.EstimateFeeParams.class, new TypeSelector<com.cobo.waas2.model.EstimateFeeParams>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.EstimateFeeParams> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ContractCall", com.cobo.waas2.model.EstimateContractCallFeeParams.class);
                        classByDiscriminatorValue.put("Transfer", com.cobo.waas2.model.EstimateTransferFeeParams.class);
                        classByDiscriminatorValue.put("EstimateContractCallFeeParams", com.cobo.waas2.model.EstimateContractCallFeeParams.class);
                        classByDiscriminatorValue.put("EstimateTransferFeeParams", com.cobo.waas2.model.EstimateTransferFeeParams.class);
                        classByDiscriminatorValue.put("EstimateFeeParams", com.cobo.waas2.model.EstimateFeeParams.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "request_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.EstimatedFee.class, new TypeSelector<com.cobo.waas2.model.EstimatedFee>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.EstimatedFee> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EVM_EIP_1559", com.cobo.waas2.model.EstimatedEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("EVM_Legacy", com.cobo.waas2.model.EstimatedEvmLegacyFee.class);
                        classByDiscriminatorValue.put("Fixed", com.cobo.waas2.model.EstimatedFixedFee.class);
                        classByDiscriminatorValue.put("UTXO", com.cobo.waas2.model.EstimatedUtxoFee.class);
                        classByDiscriminatorValue.put("EstimatedEvmEip1559Fee", com.cobo.waas2.model.EstimatedEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("EstimatedEvmLegacyFee", com.cobo.waas2.model.EstimatedEvmLegacyFee.class);
                        classByDiscriminatorValue.put("EstimatedFixedFee", com.cobo.waas2.model.EstimatedFixedFee.class);
                        classByDiscriminatorValue.put("EstimatedUtxoFee", com.cobo.waas2.model.EstimatedUtxoFee.class);
                        classByDiscriminatorValue.put("EstimatedFee", com.cobo.waas2.model.EstimatedFee.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "fee_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.FeeRate.class, new TypeSelector<com.cobo.waas2.model.FeeRate>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.FeeRate> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EVM_EIP_1559", com.cobo.waas2.model.EvmEip1559FeeRate.class);
                        classByDiscriminatorValue.put("EVM_Legacy", com.cobo.waas2.model.EvmLegacyFeeRate.class);
                        classByDiscriminatorValue.put("Fixed", com.cobo.waas2.model.FixedFeeRate.class);
                        classByDiscriminatorValue.put("UTXO", com.cobo.waas2.model.UtxoFeeRate.class);
                        classByDiscriminatorValue.put("EvmEip1559FeeRate", com.cobo.waas2.model.EvmEip1559FeeRate.class);
                        classByDiscriminatorValue.put("EvmLegacyFeeRate", com.cobo.waas2.model.EvmLegacyFeeRate.class);
                        classByDiscriminatorValue.put("FixedFeeRate", com.cobo.waas2.model.FixedFeeRate.class);
                        classByDiscriminatorValue.put("UtxoFeeRate", com.cobo.waas2.model.UtxoFeeRate.class);
                        classByDiscriminatorValue.put("FeeRate", com.cobo.waas2.model.FeeRate.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "fee_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.GetStakingEstimationFee201Response.class, new TypeSelector<com.cobo.waas2.model.GetStakingEstimationFee201Response>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.GetStakingEstimationFee201Response> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Babylon", com.cobo.waas2.model.BabylonStakeEstimatedFee.class);
                        classByDiscriminatorValue.put("ETHBeacon", com.cobo.waas2.model.EthStakeEstimatedFee.class);
                        classByDiscriminatorValue.put("BabylonStakeEstimatedFee", com.cobo.waas2.model.BabylonStakeEstimatedFee.class);
                        classByDiscriminatorValue.put("EthStakeEstimatedFee", com.cobo.waas2.model.EthStakeEstimatedFee.class);
                        classByDiscriminatorValue.put("get_staking_estimation_fee_201_response", com.cobo.waas2.model.GetStakingEstimationFee201Response.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.GetStakingEstimationFeeRequest.class, new TypeSelector<com.cobo.waas2.model.GetStakingEstimationFeeRequest>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.GetStakingEstimationFeeRequest> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Claim", com.cobo.waas2.model.EstimateClaimFee.class);
                        classByDiscriminatorValue.put("Stake", com.cobo.waas2.model.EstimateStakeFee.class);
                        classByDiscriminatorValue.put("Unstake", com.cobo.waas2.model.EstimateUnstakeFee.class);
                        classByDiscriminatorValue.put("Withdraw", com.cobo.waas2.model.EstimateWithdrawFee.class);
                        classByDiscriminatorValue.put("EstimateClaimFee", com.cobo.waas2.model.EstimateClaimFee.class);
                        classByDiscriminatorValue.put("EstimateStakeFee", com.cobo.waas2.model.EstimateStakeFee.class);
                        classByDiscriminatorValue.put("EstimateUnstakeFee", com.cobo.waas2.model.EstimateUnstakeFee.class);
                        classByDiscriminatorValue.put("EstimateWithdrawFee", com.cobo.waas2.model.EstimateWithdrawFee.class);
                        classByDiscriminatorValue.put("get_staking_estimation_fee_request", com.cobo.waas2.model.GetStakingEstimationFeeRequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "activity_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.MessageSignDestination.class, new TypeSelector<com.cobo.waas2.model.MessageSignDestination>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.MessageSignDestination> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("BTC_EIP_191_Signature", com.cobo.waas2.model.BTCEIP191MessageSignDestination.class);
                        classByDiscriminatorValue.put("EVM_EIP_191_Signature", com.cobo.waas2.model.EvmEIP191MessageSignDestination.class);
                        classByDiscriminatorValue.put("EVM_EIP_712_Signature", com.cobo.waas2.model.EvmEIP712MessageSignDestination.class);
                        classByDiscriminatorValue.put("RAW_MESSAGE", com.cobo.waas2.model.RawMessageSignDestination.class);
                        classByDiscriminatorValue.put("BTCEIP191MessageSignDestination", com.cobo.waas2.model.BTCEIP191MessageSignDestination.class);
                        classByDiscriminatorValue.put("EvmEIP191MessageSignDestination", com.cobo.waas2.model.EvmEIP191MessageSignDestination.class);
                        classByDiscriminatorValue.put("EvmEIP712MessageSignDestination", com.cobo.waas2.model.EvmEIP712MessageSignDestination.class);
                        classByDiscriminatorValue.put("RawMessageSignDestination", com.cobo.waas2.model.RawMessageSignDestination.class);
                        classByDiscriminatorValue.put("MessageSignDestination", com.cobo.waas2.model.MessageSignDestination.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.MessageSignSource.class, new TypeSelector<com.cobo.waas2.model.MessageSignSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.MessageSignSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MpcMessageSignSource.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.MpcMessageSignSource.class);
                        classByDiscriminatorValue.put("MpcMessageSignSource", com.cobo.waas2.model.MpcMessageSignSource.class);
                        classByDiscriminatorValue.put("MessageSignSource", com.cobo.waas2.model.MessageSignSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.PoolDetailsAllOfValidatorsInfo.class, new TypeSelector<com.cobo.waas2.model.PoolDetailsAllOfValidatorsInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.PoolDetailsAllOfValidatorsInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Babylon", com.cobo.waas2.model.BabylonValidator.class);
                        classByDiscriminatorValue.put("BabylonValidator", com.cobo.waas2.model.BabylonValidator.class);
                        classByDiscriminatorValue.put("PoolDetails_allOf_validators_info", com.cobo.waas2.model.PoolDetailsAllOfValidatorsInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.SafeWalletDelegates.class, new TypeSelector<com.cobo.waas2.model.SafeWalletDelegates>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.SafeWalletDelegates> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ContractCall", com.cobo.waas2.model.SafeWalletDelegatesContractCall.class);
                        classByDiscriminatorValue.put("Transfer", com.cobo.waas2.model.SafeWalletDelegatesTransfer.class);
                        classByDiscriminatorValue.put("SafeWalletDelegatesContractCall", com.cobo.waas2.model.SafeWalletDelegatesContractCall.class);
                        classByDiscriminatorValue.put("SafeWalletDelegatesTransfer", com.cobo.waas2.model.SafeWalletDelegatesTransfer.class);
                        classByDiscriminatorValue.put("SafeWalletDelegates", com.cobo.waas2.model.SafeWalletDelegates.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "request_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.SmartContractWalletInfo.class, new TypeSelector<com.cobo.waas2.model.SmartContractWalletInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.SmartContractWalletInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Safe{Wallet}", com.cobo.waas2.model.SafeWallet.class);
                        classByDiscriminatorValue.put("SafeWallet", com.cobo.waas2.model.SafeWallet.class);
                        classByDiscriminatorValue.put("SmartContractWalletInfo", com.cobo.waas2.model.SmartContractWalletInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "smart_contract_wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.StakingSource.class, new TypeSelector<com.cobo.waas2.model.StakingSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.StakingSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MpcStakeSource.class);
                        classByDiscriminatorValue.put("MpcStakeSource", com.cobo.waas2.model.MpcStakeSource.class);
                        classByDiscriminatorValue.put("StakingSource", com.cobo.waas2.model.StakingSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.StakingsExtra.class, new TypeSelector<com.cobo.waas2.model.StakingsExtra>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.StakingsExtra> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Babylon", com.cobo.waas2.model.BabylonStakingExtra.class);
                        classByDiscriminatorValue.put("CoreBTC", com.cobo.waas2.model.CoreStakingExtra.class);
                        classByDiscriminatorValue.put("ETHBeacon", com.cobo.waas2.model.EthStakingExtra.class);
                        classByDiscriminatorValue.put("BabylonStakingExtra", com.cobo.waas2.model.BabylonStakingExtra.class);
                        classByDiscriminatorValue.put("CoreStakingExtra", com.cobo.waas2.model.CoreStakingExtra.class);
                        classByDiscriminatorValue.put("EthStakingExtra", com.cobo.waas2.model.EthStakingExtra.class);
                        classByDiscriminatorValue.put("Stakings_extra", com.cobo.waas2.model.StakingsExtra.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "pool_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionDestination.class, new TypeSelector<com.cobo.waas2.model.TransactionDestination>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionDestination> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Address", com.cobo.waas2.model.TransactionTransferToAddressDestination.class);
                        classByDiscriminatorValue.put("DepositToAddress", com.cobo.waas2.model.TransactionDepositToAddressDestination.class);
                        classByDiscriminatorValue.put("DepositToWallet", com.cobo.waas2.model.TransactionDepositToWalletDestination.class);
                        classByDiscriminatorValue.put("EVM_Contract", com.cobo.waas2.model.TransactionEvmContractDestination.class);
                        classByDiscriminatorValue.put("EVM_EIP_191_Signature", com.cobo.waas2.model.TransactionMessageSignEIP191Destination.class);
                        classByDiscriminatorValue.put("EVM_EIP_712_Signature", com.cobo.waas2.model.TransactionMessageSignEIP712Destination.class);
                        classByDiscriminatorValue.put("EVM_Raw_Message_Signature", com.cobo.waas2.model.TransactionRawMessageSignDestination.class);
                        classByDiscriminatorValue.put("ExchangeWallet", com.cobo.waas2.model.TransactionTransferToWalletDestination.class);
                        classByDiscriminatorValue.put("SOL_Contract", com.cobo.waas2.model.TransactionSolContractDestination.class);
                        classByDiscriminatorValue.put("TransactionDepositToAddressDestination", com.cobo.waas2.model.TransactionDepositToAddressDestination.class);
                        classByDiscriminatorValue.put("TransactionDepositToWalletDestination", com.cobo.waas2.model.TransactionDepositToWalletDestination.class);
                        classByDiscriminatorValue.put("TransactionEvmContractDestination", com.cobo.waas2.model.TransactionEvmContractDestination.class);
                        classByDiscriminatorValue.put("TransactionMessageSignEIP191Destination", com.cobo.waas2.model.TransactionMessageSignEIP191Destination.class);
                        classByDiscriminatorValue.put("TransactionMessageSignEIP712Destination", com.cobo.waas2.model.TransactionMessageSignEIP712Destination.class);
                        classByDiscriminatorValue.put("TransactionRawMessageSignDestination", com.cobo.waas2.model.TransactionRawMessageSignDestination.class);
                        classByDiscriminatorValue.put("TransactionSolContractDestination", com.cobo.waas2.model.TransactionSolContractDestination.class);
                        classByDiscriminatorValue.put("TransactionTransferToAddressDestination", com.cobo.waas2.model.TransactionTransferToAddressDestination.class);
                        classByDiscriminatorValue.put("TransactionTransferToWalletDestination", com.cobo.waas2.model.TransactionTransferToWalletDestination.class);
                        classByDiscriminatorValue.put("Transaction_destination", com.cobo.waas2.model.TransactionDestination.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionFee.class, new TypeSelector<com.cobo.waas2.model.TransactionFee>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionFee> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EVM_EIP_1559", com.cobo.waas2.model.TransactionEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("EVM_Legacy", com.cobo.waas2.model.TransactionEvmLegacyFee.class);
                        classByDiscriminatorValue.put("Fixed", com.cobo.waas2.model.TransactionFixedFee.class);
                        classByDiscriminatorValue.put("UTXO", com.cobo.waas2.model.TransactionUtxoFee.class);
                        classByDiscriminatorValue.put("TransactionEvmEip1559Fee", com.cobo.waas2.model.TransactionEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("TransactionEvmLegacyFee", com.cobo.waas2.model.TransactionEvmLegacyFee.class);
                        classByDiscriminatorValue.put("TransactionFixedFee", com.cobo.waas2.model.TransactionFixedFee.class);
                        classByDiscriminatorValue.put("TransactionUtxoFee", com.cobo.waas2.model.TransactionUtxoFee.class);
                        classByDiscriminatorValue.put("TransactionFee", com.cobo.waas2.model.TransactionFee.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "fee_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionRbfSource.class, new TypeSelector<com.cobo.waas2.model.TransactionRbfSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionRbfSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("MpcTransferSource", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("TransactionRbf_source", com.cobo.waas2.model.TransactionRbfSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionRequestFee.class, new TypeSelector<com.cobo.waas2.model.TransactionRequestFee>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionRequestFee> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EVM_EIP_1559", com.cobo.waas2.model.TransactionRequestEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("EVM_Legacy", com.cobo.waas2.model.TransactionRequestEvmLegacyFee.class);
                        classByDiscriminatorValue.put("Fixed", com.cobo.waas2.model.TransactionRequestFixedFee.class);
                        classByDiscriminatorValue.put("UTXO", com.cobo.waas2.model.TransactionRequestUtxoFee.class);
                        classByDiscriminatorValue.put("TransactionRequestEvmEip1559Fee", com.cobo.waas2.model.TransactionRequestEvmEip1559Fee.class);
                        classByDiscriminatorValue.put("TransactionRequestEvmLegacyFee", com.cobo.waas2.model.TransactionRequestEvmLegacyFee.class);
                        classByDiscriminatorValue.put("TransactionRequestFixedFee", com.cobo.waas2.model.TransactionRequestFixedFee.class);
                        classByDiscriminatorValue.put("TransactionRequestUtxoFee", com.cobo.waas2.model.TransactionRequestUtxoFee.class);
                        classByDiscriminatorValue.put("TransactionRequestFee", com.cobo.waas2.model.TransactionRequestFee.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "fee_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionResult.class, new TypeSelector<com.cobo.waas2.model.TransactionResult>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionResult> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Signature", com.cobo.waas2.model.TransactionSignatureResult.class);
                        classByDiscriminatorValue.put("TransactionSignatureResult", com.cobo.waas2.model.TransactionSignatureResult.class);
                        classByDiscriminatorValue.put("TransactionResult", com.cobo.waas2.model.TransactionResult.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "result_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransactionSource.class, new TypeSelector<com.cobo.waas2.model.TransactionSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransactionSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Asset", com.cobo.waas2.model.TransactionCustodialAssetWalletSource.class);
                        classByDiscriminatorValue.put("DepositFromAddress", com.cobo.waas2.model.TransactionDepositFromAddressSource.class);
                        classByDiscriminatorValue.put("DepositFromLoop", com.cobo.waas2.model.TransactionDepositFromLoopSource.class);
                        classByDiscriminatorValue.put("DepositFromWallet", com.cobo.waas2.model.TransactionDepositFromWalletSource.class);
                        classByDiscriminatorValue.put("Main", com.cobo.waas2.model.TransactionExchangeWalletSource.class);
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.TransactionMPCWalletSource.class);
                        classByDiscriminatorValue.put("Safe{Wallet}", com.cobo.waas2.model.TransactionSmartContractSafeWalletSource.class);
                        classByDiscriminatorValue.put("Sub", com.cobo.waas2.model.TransactionExchangeWalletSource.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.TransactionMPCWalletSource.class);
                        classByDiscriminatorValue.put("TransactionCustodialAssetWalletSource", com.cobo.waas2.model.TransactionCustodialAssetWalletSource.class);
                        classByDiscriminatorValue.put("TransactionDepositFromAddressSource", com.cobo.waas2.model.TransactionDepositFromAddressSource.class);
                        classByDiscriminatorValue.put("TransactionDepositFromLoopSource", com.cobo.waas2.model.TransactionDepositFromLoopSource.class);
                        classByDiscriminatorValue.put("TransactionDepositFromWalletSource", com.cobo.waas2.model.TransactionDepositFromWalletSource.class);
                        classByDiscriminatorValue.put("TransactionExchangeWalletSource", com.cobo.waas2.model.TransactionExchangeWalletSource.class);
                        classByDiscriminatorValue.put("TransactionMPCWalletSource", com.cobo.waas2.model.TransactionMPCWalletSource.class);
                        classByDiscriminatorValue.put("TransactionSmartContractSafeWalletSource", com.cobo.waas2.model.TransactionSmartContractSafeWalletSource.class);
                        classByDiscriminatorValue.put("Transaction_source", com.cobo.waas2.model.TransactionSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransferDestination.class, new TypeSelector<com.cobo.waas2.model.TransferDestination>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransferDestination> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Address", com.cobo.waas2.model.AddressTransferDestination.class);
                        classByDiscriminatorValue.put("ExchangeWallet", com.cobo.waas2.model.ExchangeTransferDestination.class);
                        classByDiscriminatorValue.put("AddressTransferDestination", com.cobo.waas2.model.AddressTransferDestination.class);
                        classByDiscriminatorValue.put("ExchangeTransferDestination", com.cobo.waas2.model.ExchangeTransferDestination.class);
                        classByDiscriminatorValue.put("TransferDestination", com.cobo.waas2.model.TransferDestination.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TransferSource.class, new TypeSelector<com.cobo.waas2.model.TransferSource>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TransferSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Asset", com.cobo.waas2.model.CustodialTransferSource.class);
                        classByDiscriminatorValue.put("Main", com.cobo.waas2.model.ExchangeTransferSource.class);
                        classByDiscriminatorValue.put("Org-Controlled", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("Safe{Wallet}", com.cobo.waas2.model.SafeTransferSource.class);
                        classByDiscriminatorValue.put("Sub", com.cobo.waas2.model.ExchangeTransferSource.class);
                        classByDiscriminatorValue.put("User-Controlled", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("CustodialTransferSource", com.cobo.waas2.model.CustodialTransferSource.class);
                        classByDiscriminatorValue.put("ExchangeTransferSource", com.cobo.waas2.model.ExchangeTransferSource.class);
                        classByDiscriminatorValue.put("MpcTransferSource", com.cobo.waas2.model.MpcTransferSource.class);
                        classByDiscriminatorValue.put("SafeTransferSource", com.cobo.waas2.model.SafeTransferSource.class);
                        classByDiscriminatorValue.put("TransferSource", com.cobo.waas2.model.TransferSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "source_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TravelRuleDepositExchangesOrVASPEntityInfo.class, new TypeSelector<com.cobo.waas2.model.TravelRuleDepositExchangesOrVASPEntityInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TravelRuleDepositExchangesOrVASPEntityInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("LEGAL", com.cobo.waas2.model.TravelRuleDepositLegalEntity.class);
                        classByDiscriminatorValue.put("NATURAL", com.cobo.waas2.model.TravelRuleDepositNaturalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleDepositLegalEntity", com.cobo.waas2.model.TravelRuleDepositLegalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleDepositNaturalEntity", com.cobo.waas2.model.TravelRuleDepositNaturalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleDepositExchangesOrVASP_entity_info", com.cobo.waas2.model.TravelRuleDepositExchangesOrVASPEntityInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "selected_entity_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TravelRuleDepositRequestTravelRuleInfo.class, new TypeSelector<com.cobo.waas2.model.TravelRuleDepositRequestTravelRuleInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TravelRuleDepositRequestTravelRuleInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EXCHANGES_OR_VASP", com.cobo.waas2.model.TravelRuleDepositExchangesOrVASP.class);
                        classByDiscriminatorValue.put("SELF_CUSTODY_WALLET", com.cobo.waas2.model.SelfCustodyWallet.class);
                        classByDiscriminatorValue.put("SelfCustodyWallet", com.cobo.waas2.model.SelfCustodyWallet.class);
                        classByDiscriminatorValue.put("TravelRuleDepositExchangesOrVASP", com.cobo.waas2.model.TravelRuleDepositExchangesOrVASP.class);
                        classByDiscriminatorValue.put("TravelRuleDepositRequest_travel_rule_info", com.cobo.waas2.model.TravelRuleDepositRequestTravelRuleInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASPEntityInfo.class, new TypeSelector<com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASPEntityInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASPEntityInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("LEGAL", com.cobo.waas2.model.TravelRuleWithdrawLegalEntity.class);
                        classByDiscriminatorValue.put("NATURAL", com.cobo.waas2.model.TravelRuleWithdrawNaturalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleWithdrawLegalEntity", com.cobo.waas2.model.TravelRuleWithdrawLegalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleWithdrawNaturalEntity", com.cobo.waas2.model.TravelRuleWithdrawNaturalEntity.class);
                        classByDiscriminatorValue.put("TravelRuleWithdrawExchangesOrVASP_entity_info", com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASPEntityInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "selected_entity_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.TravelRuleWithdrawRequestTravelRuleInfo.class, new TypeSelector<com.cobo.waas2.model.TravelRuleWithdrawRequestTravelRuleInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.TravelRuleWithdrawRequestTravelRuleInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EXCHANGES_OR_VASP", com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASP.class);
                        classByDiscriminatorValue.put("SELF_CUSTODY_WALLET", com.cobo.waas2.model.SelfCustodyWallet.class);
                        classByDiscriminatorValue.put("SelfCustodyWallet", com.cobo.waas2.model.SelfCustodyWallet.class);
                        classByDiscriminatorValue.put("TravelRuleWithdrawExchangesOrVASP", com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASP.class);
                        classByDiscriminatorValue.put("TravelRuleWithdrawRequest_travel_rule_info", com.cobo.waas2.model.TravelRuleWithdrawRequestTravelRuleInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "destination_wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.UpdateWalletParams.class, new TypeSelector<com.cobo.waas2.model.UpdateWalletParams>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.UpdateWalletParams> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Custodial", com.cobo.waas2.model.UpdateCustodialWalletParams.class);
                        classByDiscriminatorValue.put("Exchange", com.cobo.waas2.model.UpdateExchangeWalletParams.class);
                        classByDiscriminatorValue.put("MPC", com.cobo.waas2.model.UpdateMpcWalletParams.class);
                        classByDiscriminatorValue.put("SmartContract", com.cobo.waas2.model.UpdateSmartContractWalletParams.class);
                        classByDiscriminatorValue.put("UpdateCustodialWalletParams", com.cobo.waas2.model.UpdateCustodialWalletParams.class);
                        classByDiscriminatorValue.put("UpdateExchangeWalletParams", com.cobo.waas2.model.UpdateExchangeWalletParams.class);
                        classByDiscriminatorValue.put("UpdateMpcWalletParams", com.cobo.waas2.model.UpdateMpcWalletParams.class);
                        classByDiscriminatorValue.put("UpdateSmartContractWalletParams", com.cobo.waas2.model.UpdateSmartContractWalletParams.class);
                        classByDiscriminatorValue.put("UpdateWalletParams", com.cobo.waas2.model.UpdateWalletParams.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.WalletInfo.class, new TypeSelector<com.cobo.waas2.model.WalletInfo>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.WalletInfo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Custodial", com.cobo.waas2.model.CustodialWalletInfo.class);
                        classByDiscriminatorValue.put("Exchange", com.cobo.waas2.model.ExchangeWalletInfo.class);
                        classByDiscriminatorValue.put("MPC", com.cobo.waas2.model.MPCWalletInfo.class);
                        classByDiscriminatorValue.put("SmartContract", com.cobo.waas2.model.SmartContractWalletInfo.class);
                        classByDiscriminatorValue.put("CustodialWalletInfo", com.cobo.waas2.model.CustodialWalletInfo.class);
                        classByDiscriminatorValue.put("ExchangeWalletInfo", com.cobo.waas2.model.ExchangeWalletInfo.class);
                        classByDiscriminatorValue.put("MPCWalletInfo", com.cobo.waas2.model.MPCWalletInfo.class);
                        classByDiscriminatorValue.put("SmartContractWalletInfo", com.cobo.waas2.model.SmartContractWalletInfo.class);
                        classByDiscriminatorValue.put("WalletInfo", com.cobo.waas2.model.WalletInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "wallet_type"));
                    }
          })
                .registerTypeSelector(com.cobo.waas2.model.WebhookEventData.class, new TypeSelector<com.cobo.waas2.model.WebhookEventData>() {
                    @Override
                    public Class<? extends com.cobo.waas2.model.WebhookEventData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Addresses", com.cobo.waas2.model.AddressesEventData.class);
                        classByDiscriminatorValue.put("MPCVault", com.cobo.waas2.model.MPCVaultEventData.class);
                        classByDiscriminatorValue.put("TSSRequest", com.cobo.waas2.model.TSSRequestWebhookEventData.class);
                        classByDiscriminatorValue.put("Transaction", com.cobo.waas2.model.TransactionWebhookEventData.class);
                        classByDiscriminatorValue.put("WalletInfo", com.cobo.waas2.model.WalletInfoEventData.class);
                        classByDiscriminatorValue.put("AddressesEventData", com.cobo.waas2.model.AddressesEventData.class);
                        classByDiscriminatorValue.put("MPCVaultEventData", com.cobo.waas2.model.MPCVaultEventData.class);
                        classByDiscriminatorValue.put("TSSRequestWebhookEventData", com.cobo.waas2.model.TSSRequestWebhookEventData.class);
                        classByDiscriminatorValue.put("TransactionWebhookEventData", com.cobo.waas2.model.TransactionWebhookEventData.class);
                        classByDiscriminatorValue.put("WalletInfoEventData", com.cobo.waas2.model.WalletInfoEventData.class);
                        classByDiscriminatorValue.put("WebhookEventData", com.cobo.waas2.model.WebhookEventData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "data_type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Activity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ActivityExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ActivityInitiator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ActivityTimeline.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressBalance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressBook.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressTransferDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressTransferDestinationAccountOutput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressTransferDestinationUtxoOutputsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AddressesEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AmountDetailsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ApiLogDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ApiLogSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AssetBalance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.AssetInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BTCEIP191MessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonAirdropPop.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonAirdropRegistration.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonEligibleAirdrop.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonStakeEstimatedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonStakingActivityDetailExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonStakingExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonStakingRegistration.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BabylonValidator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Balance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BaseContractCallSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BaseEstimateStakingFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BaseStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BaseStakeSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BroadcastSignedTransactions201ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.BroadcastSignedTransactionsRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CallbackMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ChainInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ChangeGuardPubkey200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CheckAddressChainsValidity200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CheckAddressValidity200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CheckAddressesValidity200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CheckLoopTransfers200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CoboSafeDelegate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ContractCallDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ContractCallParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ContractCallSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CoreStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CoreStakingActivityDetailExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CoreStakingExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateAddressRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateBabylonAirdropRegistration201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateBabylonAirdropRegistrationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateBabylonStakingRegistration201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateBabylonStakingRegistrationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateClaimActivity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateClaimActivityRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateCustodialWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateExchangeWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateKeyShareHolder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateKeyShareHolderGroupRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateMpcProjectRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateMpcVaultRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateMpcWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreatePrimeBrokerAddress201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreatePrimeBrokerAddressRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateSafeWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateSmartContractWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateStakeActivity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateStakeActivity201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateStakeActivityExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateStakeActivityRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateSwapActivityRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateSwapQuote201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateSwapQuoteRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateTransferTransaction201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateTssRequestRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateUnstakeActivity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateUnstakeActivityExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateUnstakeActivityRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateWebhookEndpointRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateWithdrawActivity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreateWithdrawActivityRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CreatedWalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CustodialTransferSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.CustodialWalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.DeleteGuardPubkey201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.DeleteKeyShareHolderGroupById201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.DeleteWalletById201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EigenLayerLstStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EigenLayerNativeStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EigenlayerValidator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ErrorResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateClaimFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateContractCallFeeParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateFeeParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateStakeFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateTransferFeeParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateUnstakeFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimateWithdrawFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedEvmEip1559Fee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedEvmEip1559FeeSlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedEvmLegacyFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedEvmLegacyFeeSlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedFixedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedUtxoFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EstimatedUtxoFeeSlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthStakeEstimatedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthStakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthStakingActivityDetailExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthStakingExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthStakingExtraAllOfBeaconValidators.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EthUnstakeExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmContractCallDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmEIP191MessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmEIP712MessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmEip1559FeeBasePrice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmEip1559FeeRate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmLegacyFeeBasePrice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.EvmLegacyFeeRate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ExchangeTransferDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ExchangeTransferSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ExchangeWalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ExtendedTokenInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.FeeAmount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.FeeGasLimit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.FeeRate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.FixedFeeRate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetApiKeyInfo200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetStakingEstimationFee201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetStakingEstimationFeeRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetToken2XXResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetToken4XXResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.GetTransactionLimitation200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.KeyShareHolder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.KeyShareHolderGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListAddressBalancesByToken200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListAddressBooks200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListAddresses200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListAssetBalancesForExchangeWallet200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListBabylonAirdropRegistrations200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListBabylonEligibleAirdrops200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListBabylonEligibleStakings200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListBabylonEligibleStakings200ResponseDataInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListBabylonStakingRegistrations200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListCallbackMessages200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListEnableTokenPairs200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListExchanges200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListKeyShareHolderGroups200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListKeyShareHolders200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListMpcProjects200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListMpcVaults200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListStakingActivities200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListStakingPools200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListStakings200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListSupportedAssetsForExchange200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListSupportedChains200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListSupportedCountries200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListSupportedTokens200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListSwapActivities200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListTokenBalancesForAddress200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListTransactions200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListTssRequests200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListUtxos200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListWallets200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListWebhookEndpoints200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListWebhookEventDefinitions200ResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListWebhookEventLogs200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.ListWebhookEvents200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.LockUtxos201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.LockUtxosRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.LockUtxosRequestUtxosInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MPCDelegate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MPCProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MPCVault.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MPCVaultEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MPCWalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MaxFeeAmount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MaxTransferableValue.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MessageSignParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MessageSignSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MpcContractCallSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MpcMessageSignSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MpcSigningGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MpcStakeSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.MpcTransferSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.OrgInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Pagination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.PoolDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.PoolDetailsAllOfValidatorsInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.PoolSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.QueryApprovalStatement200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.QueryGuardPubkey200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.QueryGuardPubkey200ResponseAddressesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RawMessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RefreshToken2XXResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RefreshTokenRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RetryCallbackMessage201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RetryWebhookEventById201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RoleScopes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.RootPubkey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeContractCallSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeTransferSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeWallet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeWalletDelegates.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeWalletDelegatesContractCall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SafeWalletDelegatesTransfer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Scopes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SelfCustodyWallet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SmartContractInitiator.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SmartContractWalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SolContractCallAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SolContractCallDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SolContractCallInstruction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SourceGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.StakingSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Stakings.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.StakingsExtra.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SubWalletAssetBalance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SubmitDepositTravelRuleInfo201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SwapActivity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SwapQuote.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.SwapTokenPair.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TSSGroups.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TSSRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TSSRequestWebhookEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TokenBalance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TokenInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Transaction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionApprovalDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionApprover.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionBlockInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionCustodialAssetWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositFromAddressSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositFromLoopSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositFromWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositToAddressDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositToAddressDestinationTxInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDepositToWalletDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionEvmCalldataInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionEvmContractDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionEvmContractMethod.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionEvmEip1559Fee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionEvmLegacyFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionExchangeWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionFeeStationWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionFixedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionMPCWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionMessageSignEIP191Destination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionMessageSignEIP712Destination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRawMessageSignDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRawTxInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRbf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRbfSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionReplacement.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRequestEvmEip1559Fee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRequestEvmLegacyFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRequestFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRequestFixedFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRequestUtxoFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionResend.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionRoleApprovalDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSelectedUtxo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSignatureResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSigner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSmartContractSafeWalletSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSolContractAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSolContractDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSolContractInstruction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTimeline.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTokeApproval.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTokenAmount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTransferToAddressDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTransferToAddressDestinationAccountOutput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTransferToAddressDestinationUtxoOutputsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionTransferToWalletDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionUserApprovalDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionUtxo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionUtxoChange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionUtxoFee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransactionWebhookEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransferDestination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransferParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TransferSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositExchangesOrVASP.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositExchangesOrVASPEntityInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositLegalEntity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositNaturalEntity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleDepositRequestTravelRuleInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASP.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawExchangesOrVASPEntityInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawLegalEntity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawNaturalEntity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TravelRuleWithdrawRequestTravelRuleInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TriggerTestWebhookEvent201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.TriggerTestWebhookEventRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UTXO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateCustodialWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateExchangeWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateKeyShareHolderGroupByIdRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateMpcProjectByIdRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateMpcVaultByIdRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateMpcWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateSmartContractWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateWalletParams.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UpdateWebhookEndpointByIdRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UtxoFeeBasePrice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.UtxoFeeRate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.Vasp.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WalletInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WalletInfoEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WebhookEndpoint.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WebhookEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WebhookEventData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WebhookEventDataType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.cobo.waas2.model.WebhookEventLog.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(sdf.parse(date).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, DateTimeFormatter will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toInstant().atOffset(ZoneOffset.UTC).format(dtf);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return sdf.parse(date);
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
