/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiCallback;
import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.ApiResponse;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.Pair;
import com.cobo.waas2.ProgressRequestBody;
import com.cobo.waas2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cobo.waas2.model.ChangeGuardPubkey200Response;
import com.cobo.waas2.model.CreatePrimeBrokerAddress201Response;
import com.cobo.waas2.model.CreatePrimeBrokerAddressRequest;
import com.cobo.waas2.model.DeleteGuardPubkey201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.QueryApprovalStatement200Response;
import com.cobo.waas2.model.QueryGuardPubkey200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrimeBrokerApi {
    private ApiClient localVarApiClient;

    public PrimeBrokerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrimeBrokerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for changeGuardPubkey
     * @param userId user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeGuardPubkeyCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prime_broker/user/{user_id}/guard_pubkey"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeGuardPubkeyValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changeGuardPubkey(Async)");
        }

        return changeGuardPubkeyCall(userId, _callback);

    }

    /**
     * change a user guard pubkey
     * This operation change a user guard pubkey. 
     * @param userId user id. (required)
     * @return ChangeGuardPubkey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeGuardPubkey200Response changeGuardPubkey(String userId) throws ApiException {
        ApiResponse<ChangeGuardPubkey200Response> localVarResp = changeGuardPubkeyWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * change a user guard pubkey
     * This operation change a user guard pubkey. 
     * @param userId user id. (required)
     * @return ApiResponse&lt;ChangeGuardPubkey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeGuardPubkey200Response> changeGuardPubkeyWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = changeGuardPubkeyValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ChangeGuardPubkey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * change a user guard pubkey (asynchronously)
     * This operation change a user guard pubkey. 
     * @param userId user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeGuardPubkeyAsync(String userId, final ApiCallback<ChangeGuardPubkey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeGuardPubkeyValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ChangeGuardPubkey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGuardPubkey
     * @param userId user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGuardPubkeyCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prime_broker/user/{user_id}/guard_pubkey"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGuardPubkeyValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createGuardPubkey(Async)");
        }

        return createGuardPubkeyCall(userId, _callback);

    }

    /**
     * create a guard pubkey binding
     * This operation create a guard pubkey binding. 
     * @param userId user id. (required)
     * @return ChangeGuardPubkey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeGuardPubkey200Response createGuardPubkey(String userId) throws ApiException {
        ApiResponse<ChangeGuardPubkey200Response> localVarResp = createGuardPubkeyWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * create a guard pubkey binding
     * This operation create a guard pubkey binding. 
     * @param userId user id. (required)
     * @return ApiResponse&lt;ChangeGuardPubkey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeGuardPubkey200Response> createGuardPubkeyWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = createGuardPubkeyValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ChangeGuardPubkey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create a guard pubkey binding (asynchronously)
     * This operation create a guard pubkey binding. 
     * @param userId user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGuardPubkeyAsync(String userId, final ApiCallback<ChangeGuardPubkey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGuardPubkeyValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ChangeGuardPubkey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPrimeBrokerAddress
     * @param userId user id. (required)
     * @param createPrimeBrokerAddressRequest The request body to binding addresses to a broker user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a address binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrimeBrokerAddressCall(String userId, CreatePrimeBrokerAddressRequest createPrimeBrokerAddressRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPrimeBrokerAddressRequest;

        // create path and map variables
        String localVarPath = "/prime_broker/user/{user_id}/addresses"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPrimeBrokerAddressValidateBeforeCall(String userId, CreatePrimeBrokerAddressRequest createPrimeBrokerAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPrimeBrokerAddress(Async)");
        }

        return createPrimeBrokerAddressCall(userId, createPrimeBrokerAddressRequest, _callback);

    }

    /**
     * bind addresses to a broker user
     * This operation bind addresses to a broker user. 
     * @param userId user id. (required)
     * @param createPrimeBrokerAddressRequest The request body to binding addresses to a broker user. (optional)
     * @return CreatePrimeBrokerAddress201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a address binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePrimeBrokerAddress201Response createPrimeBrokerAddress(String userId, CreatePrimeBrokerAddressRequest createPrimeBrokerAddressRequest) throws ApiException {
        ApiResponse<CreatePrimeBrokerAddress201Response> localVarResp = createPrimeBrokerAddressWithHttpInfo(userId, createPrimeBrokerAddressRequest);
        return localVarResp.getData();
    }

    /**
     * bind addresses to a broker user
     * This operation bind addresses to a broker user. 
     * @param userId user id. (required)
     * @param createPrimeBrokerAddressRequest The request body to binding addresses to a broker user. (optional)
     * @return ApiResponse&lt;CreatePrimeBrokerAddress201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a address binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePrimeBrokerAddress201Response> createPrimeBrokerAddressWithHttpInfo(String userId, CreatePrimeBrokerAddressRequest createPrimeBrokerAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = createPrimeBrokerAddressValidateBeforeCall(userId, createPrimeBrokerAddressRequest, null);
        Type localVarReturnType = new TypeToken<CreatePrimeBrokerAddress201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * bind addresses to a broker user (asynchronously)
     * This operation bind addresses to a broker user. 
     * @param userId user id. (required)
     * @param createPrimeBrokerAddressRequest The request body to binding addresses to a broker user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a address binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrimeBrokerAddressAsync(String userId, CreatePrimeBrokerAddressRequest createPrimeBrokerAddressRequest, final ApiCallback<CreatePrimeBrokerAddress201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPrimeBrokerAddressValidateBeforeCall(userId, createPrimeBrokerAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePrimeBrokerAddress201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGuardPubkey
     * @param userId user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGuardPubkeyCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prime_broker/user/{user_id}/guard_pubkey/delete"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGuardPubkeyValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteGuardPubkey(Async)");
        }

        return deleteGuardPubkeyCall(userId, _callback);

    }

    /**
     * delete a user guard pubkey
     * This operation delete a user guard pubkey. 
     * @param userId user id. (required)
     * @return DeleteGuardPubkey201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGuardPubkey201Response deleteGuardPubkey(String userId) throws ApiException {
        ApiResponse<DeleteGuardPubkey201Response> localVarResp = deleteGuardPubkeyWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * delete a user guard pubkey
     * This operation delete a user guard pubkey. 
     * @param userId user id. (required)
     * @return ApiResponse&lt;DeleteGuardPubkey201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGuardPubkey201Response> deleteGuardPubkeyWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteGuardPubkeyValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<DeleteGuardPubkey201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete a user guard pubkey (asynchronously)
     * This operation delete a user guard pubkey. 
     * @param userId user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a guard binding. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGuardPubkeyAsync(String userId, final ApiCallback<DeleteGuardPubkey201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGuardPubkeyValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<DeleteGuardPubkey201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryApprovalStatement
     * @param statementId approval statement id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about a approval statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryApprovalStatementCall(String statementId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prime_broker/approval_statement/{statement_id}"
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryApprovalStatementValidateBeforeCall(String statementId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling queryApprovalStatement(Async)");
        }

        return queryApprovalStatementCall(statementId, _callback);

    }

    /**
     * query a approval statement
     * This operation query a approval statement. 
     * @param statementId approval statement id. (required)
     * @return QueryApprovalStatement200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about a approval statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public QueryApprovalStatement200Response queryApprovalStatement(String statementId) throws ApiException {
        ApiResponse<QueryApprovalStatement200Response> localVarResp = queryApprovalStatementWithHttpInfo(statementId);
        return localVarResp.getData();
    }

    /**
     * query a approval statement
     * This operation query a approval statement. 
     * @param statementId approval statement id. (required)
     * @return ApiResponse&lt;QueryApprovalStatement200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about a approval statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryApprovalStatement200Response> queryApprovalStatementWithHttpInfo(String statementId) throws ApiException {
        okhttp3.Call localVarCall = queryApprovalStatementValidateBeforeCall(statementId, null);
        Type localVarReturnType = new TypeToken<QueryApprovalStatement200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * query a approval statement (asynchronously)
     * This operation query a approval statement. 
     * @param statementId approval statement id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about a approval statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryApprovalStatementAsync(String statementId, final ApiCallback<QueryApprovalStatement200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryApprovalStatementValidateBeforeCall(statementId, _callback);
        Type localVarReturnType = new TypeToken<QueryApprovalStatement200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGuardPubkey
     * @param userId user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an user guard pubkey. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGuardPubkeyCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prime_broker/user/{user_id}/guard_pubkey"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGuardPubkeyValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling queryGuardPubkey(Async)");
        }

        return queryGuardPubkeyCall(userId, _callback);

    }

    /**
     * query a user guard pubkey
     * This operation query a user guard pubkey 
     * @param userId user id. (required)
     * @return QueryGuardPubkey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an user guard pubkey. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public QueryGuardPubkey200Response queryGuardPubkey(String userId) throws ApiException {
        ApiResponse<QueryGuardPubkey200Response> localVarResp = queryGuardPubkeyWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * query a user guard pubkey
     * This operation query a user guard pubkey 
     * @param userId user id. (required)
     * @return ApiResponse&lt;QueryGuardPubkey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an user guard pubkey. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryGuardPubkey200Response> queryGuardPubkeyWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = queryGuardPubkeyValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<QueryGuardPubkey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * query a user guard pubkey (asynchronously)
     * This operation query a user guard pubkey 
     * @param userId user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an user guard pubkey. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Please provide valid credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. You do not have the permission to access the requested resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGuardPubkeyAsync(String userId, final ApiCallback<QueryGuardPubkey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGuardPubkeyValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<QueryGuardPubkey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
