/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiCallback;
import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.ApiResponse;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.Pair;
import com.cobo.waas2.ProgressRequestBody;
import com.cobo.waas2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.GetApiKeyInfo200Response;
import com.cobo.waas2.model.ListCallbackMessages200Response;
import com.cobo.waas2.model.RetryCallbackMessage201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevelopersApi {
    private ApiClient localVarApiClient;

    public DevelopersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevelopersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getApiKeyInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API key information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiKeyInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/developers/api_key_info";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiKeyInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getApiKeyInfoCall(_callback);

    }

    /**
     * Get API key information
     * This operation retrieves the details of the API key that you are using.
     * @return GetApiKeyInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API key information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetApiKeyInfo200Response getApiKeyInfo() throws ApiException {
        ApiResponse<GetApiKeyInfo200Response> localVarResp = getApiKeyInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get API key information
     * This operation retrieves the details of the API key that you are using.
     * @return ApiResponse&lt;GetApiKeyInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API key information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetApiKeyInfo200Response> getApiKeyInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getApiKeyInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetApiKeyInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API key information (asynchronously)
     * This operation retrieves the details of the API key that you are using.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API key information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiKeyInfoAsync(final ApiCallback<GetApiKeyInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiKeyInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetApiKeyInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCallbackMessages
     * @param callbackMessageIds A list of callback message IDs, separated by commas. (optional)
     * @param requestIds A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization. (optional)
     * @param transactionIds A list of transaction IDs, separated by commas. (optional)
     * @param walletIds A list of wallet IDs, separated by commas. (optional)
     * @param status The callback message status. Possible values include &#x60;Approved&#x60;, &#x60;Denied&#x60;, and &#x60;Failed&#x60;. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about callback messages. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallbackMessagesCall(String callbackMessageIds, String requestIds, String transactionIds, String walletIds, String status, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/developers/callback_messages";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (callbackMessageIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback_message_ids", callbackMessageIds));
        }

        if (requestIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_ids", requestIds));
        }

        if (transactionIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_ids", transactionIds));
        }

        if (walletIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet_ids", walletIds));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCallbackMessagesValidateBeforeCall(String callbackMessageIds, String requestIds, String transactionIds, String walletIds, String status, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        return listCallbackMessagesCall(callbackMessageIds, requestIds, transactionIds, walletIds, status, limit, before, after, _callback);

    }

    /**
     * List all callback messages
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param callbackMessageIds A list of callback message IDs, separated by commas. (optional)
     * @param requestIds A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization. (optional)
     * @param transactionIds A list of transaction IDs, separated by commas. (optional)
     * @param walletIds A list of wallet IDs, separated by commas. (optional)
     * @param status The callback message status. Possible values include &#x60;Approved&#x60;, &#x60;Denied&#x60;, and &#x60;Failed&#x60;. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListCallbackMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about callback messages. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListCallbackMessages200Response listCallbackMessages(String callbackMessageIds, String requestIds, String transactionIds, String walletIds, String status, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListCallbackMessages200Response> localVarResp = listCallbackMessagesWithHttpInfo(callbackMessageIds, requestIds, transactionIds, walletIds, status, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List all callback messages
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param callbackMessageIds A list of callback message IDs, separated by commas. (optional)
     * @param requestIds A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization. (optional)
     * @param transactionIds A list of transaction IDs, separated by commas. (optional)
     * @param walletIds A list of wallet IDs, separated by commas. (optional)
     * @param status The callback message status. Possible values include &#x60;Approved&#x60;, &#x60;Denied&#x60;, and &#x60;Failed&#x60;. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListCallbackMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about callback messages. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCallbackMessages200Response> listCallbackMessagesWithHttpInfo(String callbackMessageIds, String requestIds, String transactionIds, String walletIds, String status, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listCallbackMessagesValidateBeforeCall(callbackMessageIds, requestIds, transactionIds, walletIds, status, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListCallbackMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all callback messages (asynchronously)
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param callbackMessageIds A list of callback message IDs, separated by commas. (optional)
     * @param requestIds A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization. (optional)
     * @param transactionIds A list of transaction IDs, separated by commas. (optional)
     * @param walletIds A list of wallet IDs, separated by commas. (optional)
     * @param status The callback message status. Possible values include &#x60;Approved&#x60;, &#x60;Denied&#x60;, and &#x60;Failed&#x60;. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about callback messages. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallbackMessagesAsync(String callbackMessageIds, String requestIds, String transactionIds, String walletIds, String status, Integer limit, String before, String after, final ApiCallback<ListCallbackMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCallbackMessagesValidateBeforeCall(callbackMessageIds, requestIds, transactionIds, walletIds, status, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListCallbackMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retryCallbackMessage
     * @param messageId The callback message ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retryCallbackMessageCall(String messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/developers/callback_messages/{message_id}/retry"
            .replace("{" + "message_id" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retryCallbackMessageValidateBeforeCall(String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling retryCallbackMessage(Async)");
        }

        return retryCallbackMessageCall(messageId, _callback);

    }

    /**
     * Retry callback message
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn&#39;t respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be &#x60;Failed&#x60;. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param messageId The callback message ID. (required)
     * @return RetryCallbackMessage201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public RetryCallbackMessage201Response retryCallbackMessage(String messageId) throws ApiException {
        ApiResponse<RetryCallbackMessage201Response> localVarResp = retryCallbackMessageWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * Retry callback message
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn&#39;t respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be &#x60;Failed&#x60;. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param messageId The callback message ID. (required)
     * @return ApiResponse&lt;RetryCallbackMessage201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetryCallbackMessage201Response> retryCallbackMessageWithHttpInfo(String messageId) throws ApiException {
        okhttp3.Call localVarCall = retryCallbackMessageValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<RetryCallbackMessage201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry callback message (asynchronously)
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn&#39;t respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be &#x60;Failed&#x60;. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param messageId The callback message ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retryCallbackMessageAsync(String messageId, final ApiCallback<RetryCallbackMessage201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retryCallbackMessageValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<RetryCallbackMessage201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
