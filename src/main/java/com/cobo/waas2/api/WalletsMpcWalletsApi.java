/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiCallback;
import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.ApiResponse;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.Pair;
import com.cobo.waas2.ProgressRequestBody;
import com.cobo.waas2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cobo.waas2.model.CreateKeyShareHolderGroupRequest;
import com.cobo.waas2.model.CreateMpcProjectRequest;
import com.cobo.waas2.model.CreateMpcVaultRequest;
import com.cobo.waas2.model.CreateTssRequestRequest;
import com.cobo.waas2.model.DeleteKeyShareHolderGroupById201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.KeyShareHolder;
import com.cobo.waas2.model.KeyShareHolderGroup;
import com.cobo.waas2.model.KeyShareHolderGroupType;
import com.cobo.waas2.model.ListKeyShareHolderGroups200Response;
import com.cobo.waas2.model.ListKeyShareHolders200Response;
import com.cobo.waas2.model.ListMpcProjects200Response;
import com.cobo.waas2.model.ListMpcVaults200Response;
import com.cobo.waas2.model.ListTssRequests200Response;
import com.cobo.waas2.model.MPCProject;
import com.cobo.waas2.model.MPCVault;
import com.cobo.waas2.model.MPCVaultType;
import com.cobo.waas2.model.TSSRequest;
import java.util.UUID;
import com.cobo.waas2.model.UpdateKeyShareHolderGroupByIdRequest;
import com.cobo.waas2.model.UpdateMpcProjectByIdRequest;
import com.cobo.waas2.model.UpdateMpcVaultByIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletsMpcWalletsApi {
    private ApiClient localVarApiClient;

    public WalletsMpcWalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletsMpcWalletsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelTssRequestById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully modified the TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTssRequestByIdCall(UUID vaultId, String tssRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "tss_request_id" + "}", localVarApiClient.escapeString(tssRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTssRequestByIdValidateBeforeCall(UUID vaultId, String tssRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling cancelTssRequestById(Async)");
        }

        // verify the required parameter 'tssRequestId' is set
        if (tssRequestId == null) {
            throw new ApiException("Missing the required parameter 'tssRequestId' when calling cancelTssRequestById(Async)");
        }

        return cancelTssRequestByIdCall(vaultId, tssRequestId, _callback);

    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @return TSSRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully modified the TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TSSRequest cancelTssRequestById(UUID vaultId, String tssRequestId) throws ApiException {
        ApiResponse<TSSRequest> localVarResp = cancelTssRequestByIdWithHttpInfo(vaultId, tssRequestId);
        return localVarResp.getData();
    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @return ApiResponse&lt;TSSRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully modified the TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSSRequest> cancelTssRequestByIdWithHttpInfo(UUID vaultId, String tssRequestId) throws ApiException {
        okhttp3.Call localVarCall = cancelTssRequestByIdValidateBeforeCall(vaultId, tssRequestId, null);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel TSS request (asynchronously)
     * This operation cancels a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully modified the TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTssRequestByIdAsync(UUID vaultId, String tssRequestId, final ApiCallback<TSSRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTssRequestByIdValidateBeforeCall(vaultId, tssRequestId, _callback);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKeyShareHolderGroup
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createKeyShareHolderGroupRequest The request body to create a key share holder group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyShareHolderGroupCall(UUID vaultId, CreateKeyShareHolderGroupRequest createKeyShareHolderGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createKeyShareHolderGroupRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holder_groups"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyShareHolderGroupValidateBeforeCall(UUID vaultId, CreateKeyShareHolderGroupRequest createKeyShareHolderGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling createKeyShareHolderGroup(Async)");
        }

        return createKeyShareHolderGroupCall(vaultId, createKeyShareHolderGroupRequest, _callback);

    }

    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. &lt;Note&gt;This operation will not return the &#x60;tss_key_share_groups&#x60; property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you&#39;ve completed the previous actions.&lt;/Note&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createKeyShareHolderGroupRequest The request body to create a key share holder group. (optional)
     * @return KeyShareHolderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public KeyShareHolderGroup createKeyShareHolderGroup(UUID vaultId, CreateKeyShareHolderGroupRequest createKeyShareHolderGroupRequest) throws ApiException {
        ApiResponse<KeyShareHolderGroup> localVarResp = createKeyShareHolderGroupWithHttpInfo(vaultId, createKeyShareHolderGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. &lt;Note&gt;This operation will not return the &#x60;tss_key_share_groups&#x60; property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you&#39;ve completed the previous actions.&lt;/Note&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createKeyShareHolderGroupRequest The request body to create a key share holder group. (optional)
     * @return ApiResponse&lt;KeyShareHolderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyShareHolderGroup> createKeyShareHolderGroupWithHttpInfo(UUID vaultId, CreateKeyShareHolderGroupRequest createKeyShareHolderGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createKeyShareHolderGroupValidateBeforeCall(vaultId, createKeyShareHolderGroupRequest, null);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create key share holder group (asynchronously)
     * This operation creates a key share holder group for a specified vault. &lt;Note&gt;This operation will not return the &#x60;tss_key_share_groups&#x60; property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you&#39;ve completed the previous actions.&lt;/Note&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createKeyShareHolderGroupRequest The request body to create a key share holder group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyShareHolderGroupAsync(UUID vaultId, CreateKeyShareHolderGroupRequest createKeyShareHolderGroupRequest, final ApiCallback<KeyShareHolderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyShareHolderGroupValidateBeforeCall(vaultId, createKeyShareHolderGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMpcProject
     * @param createMpcProjectRequest The request body to create a project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created project. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMpcProjectCall(CreateMpcProjectRequest createMpcProjectRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMpcProjectRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/projects";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMpcProjectValidateBeforeCall(CreateMpcProjectRequest createMpcProjectRequest, final ApiCallback _callback) throws ApiException {
        return createMpcProjectCall(createMpcProjectRequest, _callback);

    }

    /**
     * Create project
     * This operation creates a project.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param createMpcProjectRequest The request body to create a project. (optional)
     * @return MPCProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created project. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCProject createMpcProject(CreateMpcProjectRequest createMpcProjectRequest) throws ApiException {
        ApiResponse<MPCProject> localVarResp = createMpcProjectWithHttpInfo(createMpcProjectRequest);
        return localVarResp.getData();
    }

    /**
     * Create project
     * This operation creates a project.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param createMpcProjectRequest The request body to create a project. (optional)
     * @return ApiResponse&lt;MPCProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created project. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCProject> createMpcProjectWithHttpInfo(CreateMpcProjectRequest createMpcProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createMpcProjectValidateBeforeCall(createMpcProjectRequest, null);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project (asynchronously)
     * This operation creates a project.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param createMpcProjectRequest The request body to create a project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created project. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMpcProjectAsync(CreateMpcProjectRequest createMpcProjectRequest, final ApiCallback<MPCProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMpcProjectValidateBeforeCall(createMpcProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMpcVault
     * @param createMpcVaultRequest The request body to create a vault. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the vault. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMpcVaultCall(CreateMpcVaultRequest createMpcVaultRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMpcVaultRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMpcVaultValidateBeforeCall(CreateMpcVaultRequest createMpcVaultRequest, final ApiCallback _callback) throws ApiException {
        return createMpcVaultCall(createMpcVaultRequest, _callback);

    }

    /**
     * Create vault
     * This operation creates a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param createMpcVaultRequest The request body to create a vault. (optional)
     * @return MPCVault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the vault. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCVault createMpcVault(CreateMpcVaultRequest createMpcVaultRequest) throws ApiException {
        ApiResponse<MPCVault> localVarResp = createMpcVaultWithHttpInfo(createMpcVaultRequest);
        return localVarResp.getData();
    }

    /**
     * Create vault
     * This operation creates a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param createMpcVaultRequest The request body to create a vault. (optional)
     * @return ApiResponse&lt;MPCVault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the vault. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCVault> createMpcVaultWithHttpInfo(CreateMpcVaultRequest createMpcVaultRequest) throws ApiException {
        okhttp3.Call localVarCall = createMpcVaultValidateBeforeCall(createMpcVaultRequest, null);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create vault (asynchronously)
     * This operation creates a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param createMpcVaultRequest The request body to create a vault. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the vault. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMpcVaultAsync(CreateMpcVaultRequest createMpcVaultRequest, final ApiCallback<MPCVault> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMpcVaultValidateBeforeCall(createMpcVaultRequest, _callback);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTssRequest
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createTssRequestRequest The request body to create a TSS request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTssRequestCall(UUID vaultId, CreateTssRequestRequest createTssRequestRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createTssRequestRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/tss_requests"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTssRequestValidateBeforeCall(UUID vaultId, CreateTssRequestRequest createTssRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling createTssRequest(Async)");
        }

        return createTssRequestCall(vaultId, createTssRequestRequest, _callback);

    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createTssRequestRequest The request body to create a TSS request. (optional)
     * @return TSSRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TSSRequest createTssRequest(UUID vaultId, CreateTssRequestRequest createTssRequestRequest) throws ApiException {
        ApiResponse<TSSRequest> localVarResp = createTssRequestWithHttpInfo(vaultId, createTssRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createTssRequestRequest The request body to create a TSS request. (optional)
     * @return ApiResponse&lt;TSSRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSSRequest> createTssRequestWithHttpInfo(UUID vaultId, CreateTssRequestRequest createTssRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createTssRequestValidateBeforeCall(vaultId, createTssRequestRequest, null);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create TSS request (asynchronously)
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param createTssRequestRequest The request body to create a TSS request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> mpc vault successfully created </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTssRequestAsync(UUID vaultId, CreateTssRequestRequest createTssRequestRequest, final ApiCallback<TSSRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTssRequestValidateBeforeCall(vaultId, createTssRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKeyShareHolderGroupById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully deleted the specified key share holder group. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyShareHolderGroupByIdCall(UUID vaultId, String keyShareHolderGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "key_share_holder_group_id" + "}", localVarApiClient.escapeString(keyShareHolderGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyShareHolderGroupByIdValidateBeforeCall(UUID vaultId, String keyShareHolderGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling deleteKeyShareHolderGroupById(Async)");
        }

        // verify the required parameter 'keyShareHolderGroupId' is set
        if (keyShareHolderGroupId == null) {
            throw new ApiException("Missing the required parameter 'keyShareHolderGroupId' when calling deleteKeyShareHolderGroupById(Async)");
        }

        return deleteKeyShareHolderGroupByIdCall(vaultId, keyShareHolderGroupId, _callback);

    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @return DeleteKeyShareHolderGroupById201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully deleted the specified key share holder group. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteKeyShareHolderGroupById201Response deleteKeyShareHolderGroupById(UUID vaultId, String keyShareHolderGroupId) throws ApiException {
        ApiResponse<DeleteKeyShareHolderGroupById201Response> localVarResp = deleteKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId);
        return localVarResp.getData();
    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @return ApiResponse&lt;DeleteKeyShareHolderGroupById201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully deleted the specified key share holder group. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteKeyShareHolderGroupById201Response> deleteKeyShareHolderGroupByIdWithHttpInfo(UUID vaultId, String keyShareHolderGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, null);
        Type localVarReturnType = new TypeToken<DeleteKeyShareHolderGroupById201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete key share holder group (asynchronously)
     * This operation deletes a specified key share holder group.
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully deleted the specified key share holder group. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyShareHolderGroupByIdAsync(UUID vaultId, String keyShareHolderGroupId, final ApiCallback<DeleteKeyShareHolderGroupById201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, _callback);
        Type localVarReturnType = new TypeToken<DeleteKeyShareHolderGroupById201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyShareHolderByTssNodeId
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssNodeId The TSS Node ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder information </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyShareHolderByTssNodeIdCall(UUID vaultId, String tssNodeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holders/{tss_node_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "tss_node_id" + "}", localVarApiClient.escapeString(tssNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyShareHolderByTssNodeIdValidateBeforeCall(UUID vaultId, String tssNodeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling getKeyShareHolderByTssNodeId(Async)");
        }

        // verify the required parameter 'tssNodeId' is set
        if (tssNodeId == null) {
            throw new ApiException("Missing the required parameter 'tssNodeId' when calling getKeyShareHolderByTssNodeId(Async)");
        }

        return getKeyShareHolderByTssNodeIdCall(vaultId, tssNodeId, _callback);

    }

    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssNodeId The TSS Node ID. (required)
     * @return KeyShareHolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder information </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public KeyShareHolder getKeyShareHolderByTssNodeId(UUID vaultId, String tssNodeId) throws ApiException {
        ApiResponse<KeyShareHolder> localVarResp = getKeyShareHolderByTssNodeIdWithHttpInfo(vaultId, tssNodeId);
        return localVarResp.getData();
    }

    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssNodeId The TSS Node ID. (required)
     * @return ApiResponse&lt;KeyShareHolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder information </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyShareHolder> getKeyShareHolderByTssNodeIdWithHttpInfo(UUID vaultId, String tssNodeId) throws ApiException {
        okhttp3.Call localVarCall = getKeyShareHolderByTssNodeIdValidateBeforeCall(vaultId, tssNodeId, null);
        Type localVarReturnType = new TypeToken<KeyShareHolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get key share holder information (asynchronously)
     * This operation retrieves detailed information about a specified key share holder. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssNodeId The TSS Node ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder information </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyShareHolderByTssNodeIdAsync(UUID vaultId, String tssNodeId, final ApiCallback<KeyShareHolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyShareHolderByTssNodeIdValidateBeforeCall(vaultId, tssNodeId, _callback);
        Type localVarReturnType = new TypeToken<KeyShareHolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyShareHolderGroupById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyShareHolderGroupByIdCall(UUID vaultId, String keyShareHolderGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "key_share_holder_group_id" + "}", localVarApiClient.escapeString(keyShareHolderGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyShareHolderGroupByIdValidateBeforeCall(UUID vaultId, String keyShareHolderGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling getKeyShareHolderGroupById(Async)");
        }

        // verify the required parameter 'keyShareHolderGroupId' is set
        if (keyShareHolderGroupId == null) {
            throw new ApiException("Missing the required parameter 'keyShareHolderGroupId' when calling getKeyShareHolderGroupById(Async)");
        }

        return getKeyShareHolderGroupByIdCall(vaultId, keyShareHolderGroupId, _callback);

    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @return KeyShareHolderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public KeyShareHolderGroup getKeyShareHolderGroupById(UUID vaultId, String keyShareHolderGroupId) throws ApiException {
        ApiResponse<KeyShareHolderGroup> localVarResp = getKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId);
        return localVarResp.getData();
    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @return ApiResponse&lt;KeyShareHolderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyShareHolderGroup> getKeyShareHolderGroupByIdWithHttpInfo(UUID vaultId, String keyShareHolderGroupId) throws ApiException {
        okhttp3.Call localVarCall = getKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, null);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get key share holder group information (asynchronously)
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyShareHolderGroupByIdAsync(UUID vaultId, String keyShareHolderGroupId, final ApiCallback<KeyShareHolderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, _callback);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMpcProjectById
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMpcProjectByIdCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMpcProjectByIdValidateBeforeCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getMpcProjectById(Async)");
        }

        return getMpcProjectByIdCall(projectId, _callback);

    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @return MPCProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCProject getMpcProjectById(UUID projectId) throws ApiException {
        ApiResponse<MPCProject> localVarResp = getMpcProjectByIdWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @return ApiResponse&lt;MPCProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCProject> getMpcProjectByIdWithHttpInfo(UUID projectId) throws ApiException {
        okhttp3.Call localVarCall = getMpcProjectByIdValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project information (asynchronously)
     * This operation retrieves detailed information about a project. &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMpcProjectByIdAsync(UUID projectId, final ApiCallback<MPCProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMpcProjectByIdValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMpcVaultById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved vault information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMpcVaultByIdCall(UUID vaultId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMpcVaultByIdValidateBeforeCall(UUID vaultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling getMpcVaultById(Async)");
        }

        return getMpcVaultByIdCall(vaultId, _callback);

    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @return MPCVault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved vault information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCVault getMpcVaultById(UUID vaultId) throws ApiException {
        ApiResponse<MPCVault> localVarResp = getMpcVaultByIdWithHttpInfo(vaultId);
        return localVarResp.getData();
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @return ApiResponse&lt;MPCVault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved vault information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCVault> getMpcVaultByIdWithHttpInfo(UUID vaultId) throws ApiException {
        okhttp3.Call localVarCall = getMpcVaultByIdValidateBeforeCall(vaultId, null);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vault information (asynchronously)
     * This operation retrieves detailed information about a vault.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved vault information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMpcVaultByIdAsync(UUID vaultId, final ApiCallback<MPCVault> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMpcVaultByIdValidateBeforeCall(vaultId, _callback);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTssRequestById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTssRequestByIdCall(UUID vaultId, String tssRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "tss_request_id" + "}", localVarApiClient.escapeString(tssRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTssRequestByIdValidateBeforeCall(UUID vaultId, String tssRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling getTssRequestById(Async)");
        }

        // verify the required parameter 'tssRequestId' is set
        if (tssRequestId == null) {
            throw new ApiException("Missing the required parameter 'tssRequestId' when calling getTssRequestById(Async)");
        }

        return getTssRequestByIdCall(vaultId, tssRequestId, _callback);

    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @return TSSRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TSSRequest getTssRequestById(UUID vaultId, String tssRequestId) throws ApiException {
        ApiResponse<TSSRequest> localVarResp = getTssRequestByIdWithHttpInfo(vaultId, tssRequestId);
        return localVarResp.getData();
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @return ApiResponse&lt;TSSRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TSSRequest> getTssRequestByIdWithHttpInfo(UUID vaultId, String tssRequestId) throws ApiException {
        okhttp3.Call localVarCall = getTssRequestByIdValidateBeforeCall(vaultId, tssRequestId, null);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TSS request (asynchronously)
     * This operation retrieves detailed information about a TSS request. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTssRequestByIdAsync(UUID vaultId, String tssRequestId, final ApiCallback<TSSRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTssRequestByIdValidateBeforeCall(vaultId, tssRequestId, _callback);
        Type localVarReturnType = new TypeToken<TSSRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCoboKeyHolders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed MPC Wallets&#39; key share holder information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCoboKeyHoldersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/cobo_key_share_holders";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCoboKeyHoldersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCoboKeyHoldersCall(_callback);

    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   &lt;Info&gt;When using this operation, &#x60;type&#x60; will only return &#x60;Cobo&#x60; and will never return &#x60;Mobile&#x60; or &#x60;API&#x60;.&lt;/Info&gt; 
     * @return List&lt;KeyShareHolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed MPC Wallets&#39; key share holder information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<KeyShareHolder> listCoboKeyHolders() throws ApiException {
        ApiResponse<List<KeyShareHolder>> localVarResp = listCoboKeyHoldersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   &lt;Info&gt;When using this operation, &#x60;type&#x60; will only return &#x60;Cobo&#x60; and will never return &#x60;Mobile&#x60; or &#x60;API&#x60;.&lt;/Info&gt; 
     * @return ApiResponse&lt;List&lt;KeyShareHolder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed MPC Wallets&#39; key share holder information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KeyShareHolder>> listCoboKeyHoldersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCoboKeyHoldersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<KeyShareHolder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Cobo key share holders (asynchronously)
     * This operation retrieves a list of all Cobo key share holders and their information.   &lt;Info&gt;When using this operation, &#x60;type&#x60; will only return &#x60;Cobo&#x60; and will never return &#x60;Mobile&#x60; or &#x60;API&#x60;.&lt;/Info&gt; 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed MPC Wallets&#39; key share holder information. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCoboKeyHoldersAsync(final ApiCallback<List<KeyShareHolder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCoboKeyHoldersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<KeyShareHolder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listKeyShareHolderGroups
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupType The key share holder group type. Possible values include: - &#x60;MainGroup&#x60;: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - &#x60;SigningGroup&#x60;: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - &#x60;RecoveryGroup&#x60;: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved.  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed key share holder groups. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyShareHolderGroupsCall(UUID vaultId, KeyShareHolderGroupType keyShareHolderGroupType, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holder_groups"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (keyShareHolderGroupType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_share_holder_group_type", keyShareHolderGroupType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKeyShareHolderGroupsValidateBeforeCall(UUID vaultId, KeyShareHolderGroupType keyShareHolderGroupType, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling listKeyShareHolderGroups(Async)");
        }

        return listKeyShareHolderGroupsCall(vaultId, keyShareHolderGroupType, limit, before, after, _callback);

    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupType The key share holder group type. Possible values include: - &#x60;MainGroup&#x60;: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - &#x60;SigningGroup&#x60;: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - &#x60;RecoveryGroup&#x60;: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved.  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListKeyShareHolderGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed key share holder groups. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListKeyShareHolderGroups200Response listKeyShareHolderGroups(UUID vaultId, KeyShareHolderGroupType keyShareHolderGroupType, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListKeyShareHolderGroups200Response> localVarResp = listKeyShareHolderGroupsWithHttpInfo(vaultId, keyShareHolderGroupType, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupType The key share holder group type. Possible values include: - &#x60;MainGroup&#x60;: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - &#x60;SigningGroup&#x60;: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - &#x60;RecoveryGroup&#x60;: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved.  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListKeyShareHolderGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed key share holder groups. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListKeyShareHolderGroups200Response> listKeyShareHolderGroupsWithHttpInfo(UUID vaultId, KeyShareHolderGroupType keyShareHolderGroupType, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listKeyShareHolderGroupsValidateBeforeCall(vaultId, keyShareHolderGroupType, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListKeyShareHolderGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all key share holder groups (asynchronously)
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupType The key share holder group type. Possible values include: - &#x60;MainGroup&#x60;: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - &#x60;SigningGroup&#x60;: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - &#x60;RecoveryGroup&#x60;: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved.  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed key share holder groups. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyShareHolderGroupsAsync(UUID vaultId, KeyShareHolderGroupType keyShareHolderGroupType, Integer limit, String before, String after, final ApiCallback<ListKeyShareHolderGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKeyShareHolderGroupsValidateBeforeCall(vaultId, keyShareHolderGroupType, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListKeyShareHolderGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listKeyShareHolders
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupIds A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder list </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyShareHoldersCall(UUID vaultId, String keyShareHolderGroupIds, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holders"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (keyShareHolderGroupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_share_holder_group_ids", keyShareHolderGroupIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKeyShareHoldersValidateBeforeCall(UUID vaultId, String keyShareHolderGroupIds, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling listKeyShareHolders(Async)");
        }

        return listKeyShareHoldersCall(vaultId, keyShareHolderGroupIds, limit, before, after, _callback);

    }

    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupIds A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListKeyShareHolders200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder list </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListKeyShareHolders200Response listKeyShareHolders(UUID vaultId, String keyShareHolderGroupIds, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListKeyShareHolders200Response> localVarResp = listKeyShareHoldersWithHttpInfo(vaultId, keyShareHolderGroupIds, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupIds A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListKeyShareHolders200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder list </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListKeyShareHolders200Response> listKeyShareHoldersWithHttpInfo(UUID vaultId, String keyShareHolderGroupIds, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listKeyShareHoldersValidateBeforeCall(vaultId, keyShareHolderGroupIds, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListKeyShareHolders200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all key share holders (asynchronously)
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupIds A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved key share holder list </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listKeyShareHoldersAsync(UUID vaultId, String keyShareHolderGroupIds, Integer limit, String before, String after, final ApiCallback<ListKeyShareHolders200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKeyShareHoldersValidateBeforeCall(vaultId, keyShareHolderGroupIds, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListKeyShareHolders200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMpcProjects
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all projects. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMpcProjectsCall(Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/projects";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMpcProjectsValidateBeforeCall(Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        return listMpcProjectsCall(limit, before, after, _callback);

    }

    /**
     * List all projects
     * This operation retrieves a list of all projects.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListMpcProjects200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all projects. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListMpcProjects200Response listMpcProjects(Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListMpcProjects200Response> localVarResp = listMpcProjectsWithHttpInfo(limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListMpcProjects200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all projects. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMpcProjects200Response> listMpcProjectsWithHttpInfo(Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listMpcProjectsValidateBeforeCall(limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListMpcProjects200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all projects (asynchronously)
     * This operation retrieves a list of all projects.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all projects. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMpcProjectsAsync(Integer limit, String before, String after, final ApiCallback<ListMpcProjects200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMpcProjectsValidateBeforeCall(limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListMpcProjects200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMpcVaults
     * @param vaultType The vault type. Possible values include: - &#x60;Org-Controlled&#x60;: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - &#x60;User-Controlled&#x60;: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).  (required)
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMpcVaultsCall(MPCVaultType vaultType, UUID projectId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (vaultType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vault_type", vaultType));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMpcVaultsValidateBeforeCall(MPCVaultType vaultType, UUID projectId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultType' is set
        if (vaultType == null) {
            throw new ApiException("Missing the required parameter 'vaultType' when calling listMpcVaults(Async)");
        }

        return listMpcVaultsCall(vaultType, projectId, limit, before, after, _callback);

    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. &#x60;project_id&#x60; is required when &#x60;vault_type&#x60; is set to &#x60;User-Controlled&#x60;. 2. &#x60;project_id&#x60; must be left blank when &#x60;vault_type&#x60; is set to &#x60;Org-Controlled&#x60;.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultType The vault type. Possible values include: - &#x60;Org-Controlled&#x60;: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - &#x60;User-Controlled&#x60;: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).  (required)
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListMpcVaults200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListMpcVaults200Response listMpcVaults(MPCVaultType vaultType, UUID projectId, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListMpcVaults200Response> localVarResp = listMpcVaultsWithHttpInfo(vaultType, projectId, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. &#x60;project_id&#x60; is required when &#x60;vault_type&#x60; is set to &#x60;User-Controlled&#x60;. 2. &#x60;project_id&#x60; must be left blank when &#x60;vault_type&#x60; is set to &#x60;Org-Controlled&#x60;.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultType The vault type. Possible values include: - &#x60;Org-Controlled&#x60;: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - &#x60;User-Controlled&#x60;: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).  (required)
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListMpcVaults200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMpcVaults200Response> listMpcVaultsWithHttpInfo(MPCVaultType vaultType, UUID projectId, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listMpcVaultsValidateBeforeCall(vaultType, projectId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListMpcVaults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all vaults (asynchronously)
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. &#x60;project_id&#x60; is required when &#x60;vault_type&#x60; is set to &#x60;User-Controlled&#x60;. 2. &#x60;project_id&#x60; must be left blank when &#x60;vault_type&#x60; is set to &#x60;Org-Controlled&#x60;.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultType The vault type. Possible values include: - &#x60;Org-Controlled&#x60;: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - &#x60;User-Controlled&#x60;: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).  (required)
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).  (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMpcVaultsAsync(MPCVaultType vaultType, UUID projectId, Integer limit, String before, String after, final ApiCallback<ListMpcVaults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMpcVaultsValidateBeforeCall(vaultType, projectId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListMpcVaults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTssRequests
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTssRequestsCall(UUID vaultId, String keyShareHolderGroupId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/tss_requests"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (keyShareHolderGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_share_holder_group_id", keyShareHolderGroupId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTssRequestsValidateBeforeCall(UUID vaultId, String keyShareHolderGroupId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling listTssRequests(Async)");
        }

        // verify the required parameter 'keyShareHolderGroupId' is set
        if (keyShareHolderGroupId == null) {
            throw new ApiException("Missing the required parameter 'keyShareHolderGroupId' when calling listTssRequests(Async)");
        }

        return listTssRequestsCall(vaultId, keyShareHolderGroupId, limit, before, after, _callback);

    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ListTssRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListTssRequests200Response listTssRequests(UUID vaultId, String keyShareHolderGroupId, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListTssRequests200Response> localVarResp = listTssRequestsWithHttpInfo(vaultId, keyShareHolderGroupId, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @return ApiResponse&lt;ListTssRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTssRequests200Response> listTssRequestsWithHttpInfo(UUID vaultId, String keyShareHolderGroupId, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listTssRequestsValidateBeforeCall(vaultId, keyShareHolderGroupId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListTssRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List TSS requests (asynchronously)
     * This operation retrieves a list of TSS requests and their details. 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups). (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set &#x60;before&#x60; to the ID of Object C (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object A.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned. - If you set it to &#x60;infinity&#x60;, the last page of data is returned.  (optional)
     * @param after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set &#x60;after&#x60; to the ID of Object A (&#x60;RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk&#x60;), the response will include Object B and Object C.    **Notes**:   - If you set both &#x60;after&#x60; and &#x60;before&#x60;, an error will occur. - If you leave both &#x60;before&#x60; and &#x60;after&#x60; empty, the first page of data is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved TSS request. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTssRequestsAsync(UUID vaultId, String keyShareHolderGroupId, Integer limit, String before, String after, final ApiCallback<ListTssRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTssRequestsValidateBeforeCall(vaultId, keyShareHolderGroupId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListTssRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateKeyShareHolderGroupById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param updateKeyShareHolderGroupByIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyShareHolderGroupByIdCall(UUID vaultId, String keyShareHolderGroupId, UpdateKeyShareHolderGroupByIdRequest updateKeyShareHolderGroupByIdRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateKeyShareHolderGroupByIdRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()))
            .replace("{" + "key_share_holder_group_id" + "}", localVarApiClient.escapeString(keyShareHolderGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeyShareHolderGroupByIdValidateBeforeCall(UUID vaultId, String keyShareHolderGroupId, UpdateKeyShareHolderGroupByIdRequest updateKeyShareHolderGroupByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling updateKeyShareHolderGroupById(Async)");
        }

        // verify the required parameter 'keyShareHolderGroupId' is set
        if (keyShareHolderGroupId == null) {
            throw new ApiException("Missing the required parameter 'keyShareHolderGroupId' when calling updateKeyShareHolderGroupById(Async)");
        }

        return updateKeyShareHolderGroupByIdCall(vaultId, keyShareHolderGroupId, updateKeyShareHolderGroupByIdRequest, _callback);

    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param updateKeyShareHolderGroupByIdRequest  (optional)
     * @return KeyShareHolderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public KeyShareHolderGroup updateKeyShareHolderGroupById(UUID vaultId, String keyShareHolderGroupId, UpdateKeyShareHolderGroupByIdRequest updateKeyShareHolderGroupByIdRequest) throws ApiException {
        ApiResponse<KeyShareHolderGroup> localVarResp = updateKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId, updateKeyShareHolderGroupByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param updateKeyShareHolderGroupByIdRequest  (optional)
     * @return ApiResponse&lt;KeyShareHolderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyShareHolderGroup> updateKeyShareHolderGroupByIdWithHttpInfo(UUID vaultId, String keyShareHolderGroupId, UpdateKeyShareHolderGroupByIdRequest updateKeyShareHolderGroupByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, updateKeyShareHolderGroupByIdRequest, null);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update key share holder group (asynchronously)
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param keyShareHolderGroupId The key share holder group ID. (required)
     * @param updateKeyShareHolderGroupByIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc tss group </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyShareHolderGroupByIdAsync(UUID vaultId, String keyShareHolderGroupId, UpdateKeyShareHolderGroupByIdRequest updateKeyShareHolderGroupByIdRequest, final ApiCallback<KeyShareHolderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeyShareHolderGroupByIdValidateBeforeCall(vaultId, keyShareHolderGroupId, updateKeyShareHolderGroupByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyShareHolderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMpcProjectById
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param updateMpcProjectByIdRequest The request body to update a project&#39;s name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMpcProjectByIdCall(UUID projectId, UpdateMpcProjectByIdRequest updateMpcProjectByIdRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateMpcProjectByIdRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMpcProjectByIdValidateBeforeCall(UUID projectId, UpdateMpcProjectByIdRequest updateMpcProjectByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateMpcProjectById(Async)");
        }

        return updateMpcProjectByIdCall(projectId, updateMpcProjectByIdRequest, _callback);

    }

    /**
     * Update project name
     * This operation updates a project&#39;s name.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param updateMpcProjectByIdRequest The request body to update a project&#39;s name. (optional)
     * @return MPCProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCProject updateMpcProjectById(UUID projectId, UpdateMpcProjectByIdRequest updateMpcProjectByIdRequest) throws ApiException {
        ApiResponse<MPCProject> localVarResp = updateMpcProjectByIdWithHttpInfo(projectId, updateMpcProjectByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update project name
     * This operation updates a project&#39;s name.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param updateMpcProjectByIdRequest The request body to update a project&#39;s name. (optional)
     * @return ApiResponse&lt;MPCProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCProject> updateMpcProjectByIdWithHttpInfo(UUID projectId, UpdateMpcProjectByIdRequest updateMpcProjectByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMpcProjectByIdValidateBeforeCall(projectId, updateMpcProjectByIdRequest, null);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project name (asynchronously)
     * This operation updates a project&#39;s name.  &lt;Note&gt;This operation applies to MPC Wallets (User-Controlled Wallets) only.&lt;/Note&gt; 
     * @param projectId The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). (required)
     * @param updateMpcProjectByIdRequest The request body to update a project&#39;s name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed all vaults. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMpcProjectByIdAsync(UUID projectId, UpdateMpcProjectByIdRequest updateMpcProjectByIdRequest, final ApiCallback<MPCProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMpcProjectByIdValidateBeforeCall(projectId, updateMpcProjectByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<MPCProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMpcVaultById
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param updateMpcVaultByIdRequest The request body to update a vault&#39;s name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc vault </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMpcVaultByIdCall(UUID vaultId, UpdateMpcVaultByIdRequest updateMpcVaultByIdRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateMpcVaultByIdRequest;

        // create path and map variables
        String localVarPath = "/wallets/mpc/vaults/{vault_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMpcVaultByIdValidateBeforeCall(UUID vaultId, UpdateMpcVaultByIdRequest updateMpcVaultByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling updateMpcVaultById(Async)");
        }

        return updateMpcVaultByIdCall(vaultId, updateMpcVaultByIdRequest, _callback);

    }

    /**
     * Update vault name
     * This operation updates a vault&#39;s name.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param updateMpcVaultByIdRequest The request body to update a vault&#39;s name. (optional)
     * @return MPCVault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc vault </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MPCVault updateMpcVaultById(UUID vaultId, UpdateMpcVaultByIdRequest updateMpcVaultByIdRequest) throws ApiException {
        ApiResponse<MPCVault> localVarResp = updateMpcVaultByIdWithHttpInfo(vaultId, updateMpcVaultByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update vault name
     * This operation updates a vault&#39;s name.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param updateMpcVaultByIdRequest The request body to update a vault&#39;s name. (optional)
     * @return ApiResponse&lt;MPCVault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc vault </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MPCVault> updateMpcVaultByIdWithHttpInfo(UUID vaultId, UpdateMpcVaultByIdRequest updateMpcVaultByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMpcVaultByIdValidateBeforeCall(vaultId, updateMpcVaultByIdRequest, null);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update vault name (asynchronously)
     * This operation updates a vault&#39;s name.  &lt;Info&gt;To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).&lt;/Info&gt; 
     * @param vaultId The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). (required)
     * @param updateMpcVaultByIdRequest The request body to update a vault&#39;s name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully modify mpc vault </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMpcVaultByIdAsync(UUID vaultId, UpdateMpcVaultByIdRequest updateMpcVaultByIdRequest, final ApiCallback<MPCVault> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMpcVaultByIdValidateBeforeCall(vaultId, updateMpcVaultByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<MPCVault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
